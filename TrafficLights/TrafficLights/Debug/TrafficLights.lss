
TrafficLights.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000015e4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000015e4  00001678  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000019  00800062  00800062  0000167a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000167a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000016ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000298  00000000  00000000  000016e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001af9  00000000  00000000  00001980  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a9c  00000000  00000000  00003479  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001256  00000000  00000000  00003f15  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000688  00000000  00000000  0000516c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a69  00000000  00000000  000057f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001085  00000000  00000000  0000625d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000228  00000000  00000000  000072e2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 31 00 	jmp	0x62	; 0x62 <__ctors_end>
       4:	0c 94 55 06 	jmp	0xcaa	; 0xcaa <__vector_1>
       8:	0c 94 7e 06 	jmp	0xcfc	; 0xcfc <__vector_2>
       c:	0c 94 ab 06 	jmp	0xd56	; 0xd56 <__vector_3>
      10:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      14:	0c 94 15 07 	jmp	0xe2a	; 0xe2a <__vector_5>
      18:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      1c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      20:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      24:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      28:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      2c:	0c 94 ec 06 	jmp	0xdd8	; 0xdd8 <__vector_11>
      30:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      34:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      38:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      3c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      40:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      44:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      48:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      4c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      50:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      54:	09 08       	sbc	r0, r9
      56:	0e 08       	sbc	r0, r14
      58:	13 08       	sbc	r1, r3
      5a:	18 08       	sbc	r1, r8
      5c:	1d 08       	sbc	r1, r13
      5e:	22 08       	sbc	r2, r2
      60:	27 08       	sbc	r2, r7

00000062 <__ctors_end>:
      62:	11 24       	eor	r1, r1
      64:	1f be       	out	0x3f, r1	; 63
      66:	cf e5       	ldi	r28, 0x5F	; 95
      68:	d8 e0       	ldi	r29, 0x08	; 8
      6a:	de bf       	out	0x3e, r29	; 62
      6c:	cd bf       	out	0x3d, r28	; 61

0000006e <__do_copy_data>:
      6e:	10 e0       	ldi	r17, 0x00	; 0
      70:	a0 e6       	ldi	r26, 0x60	; 96
      72:	b0 e0       	ldi	r27, 0x00	; 0
      74:	e4 ee       	ldi	r30, 0xE4	; 228
      76:	f5 e1       	ldi	r31, 0x15	; 21
      78:	02 c0       	rjmp	.+4      	; 0x7e <__do_copy_data+0x10>
      7a:	05 90       	lpm	r0, Z+
      7c:	0d 92       	st	X+, r0
      7e:	a2 36       	cpi	r26, 0x62	; 98
      80:	b1 07       	cpc	r27, r17
      82:	d9 f7       	brne	.-10     	; 0x7a <__do_copy_data+0xc>

00000084 <__do_clear_bss>:
      84:	20 e0       	ldi	r18, 0x00	; 0
      86:	a2 e6       	ldi	r26, 0x62	; 98
      88:	b0 e0       	ldi	r27, 0x00	; 0
      8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
      8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
      8e:	ab 37       	cpi	r26, 0x7B	; 123
      90:	b2 07       	cpc	r27, r18
      92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
      94:	0e 94 31 04 	call	0x862	; 0x862 <main>
      98:	0c 94 f0 0a 	jmp	0x15e0	; 0x15e0 <_exit>

0000009c <__bad_interrupt>:
      9c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a0 <ButtonResponse>:

/************************************************************************/
/* Local Functions Definitions                                           */
/************************************************************************/
void ButtonResponse(void)
{
      a0:	cf 93       	push	r28
      a2:	df 93       	push	r29
      a4:	00 d0       	rcall	.+0      	; 0xa6 <ButtonResponse+0x6>
      a6:	00 d0       	rcall	.+0      	; 0xa8 <ButtonResponse+0x8>
      a8:	cd b7       	in	r28, 0x3d	; 61
      aa:	de b7       	in	r29, 0x3e	; 62
	volatile float32 PressTime = 0.0F;
      ac:	19 82       	std	Y+1, r1	; 0x01
      ae:	1a 82       	std	Y+2, r1	; 0x02
      b0:	1b 82       	std	Y+3, r1	; 0x03
      b2:	1c 82       	std	Y+4, r1	; 0x04
	if(Buttons_GetButtonState() != LOW)
      b4:	0e 94 7d 03 	call	0x6fa	; 0x6fa <Buttons_GetButtonState>
      b8:	88 23       	and	r24, r24
      ba:	19 f0       	breq	.+6      	; 0xc2 <ButtonResponse+0x22>
	{
		Timer_StartCountingTimer2();
      bc:	0e 94 52 08 	call	0x10a4	; 0x10a4 <Timer_StartCountingTimer2>
      c0:	17 c0       	rjmp	.+46     	; 0xf0 <ButtonResponse+0x50>
	}
	else
	{
		Timer_StopCountingTimer2();
      c2:	0e 94 6e 08 	call	0x10dc	; 0x10dc <Timer_StopCountingTimer2>
		PressTime = Timer_GetCounterTimeTimer2();
      c6:	0e 94 8e 08 	call	0x111c	; 0x111c <Timer_GetCounterTimeTimer2>
      ca:	69 83       	std	Y+1, r22	; 0x01
      cc:	7a 83       	std	Y+2, r23	; 0x02
      ce:	8b 83       	std	Y+3, r24	; 0x03
      d0:	9c 83       	std	Y+4, r25	; 0x04
		if(PressTime <= LONG_PRESS_THRS)
      d2:	69 81       	ldd	r22, Y+1	; 0x01
      d4:	7a 81       	ldd	r23, Y+2	; 0x02
      d6:	8b 81       	ldd	r24, Y+3	; 0x03
      d8:	9c 81       	ldd	r25, Y+4	; 0x04
      da:	20 e0       	ldi	r18, 0x00	; 0
      dc:	30 e0       	ldi	r19, 0x00	; 0
      de:	4a ef       	ldi	r20, 0xFA	; 250
      e0:	54 e4       	ldi	r21, 0x44	; 68
      e2:	0e 94 20 09 	call	0x1240	; 0x1240 <__cmpsf2>
      e6:	18 16       	cp	r1, r24
      e8:	1c f0       	brlt	.+6      	; 0xf0 <ButtonResponse+0x50>
		{
			TrafficState = PEDESTRIAN_MODE;
      ea:	81 e0       	ldi	r24, 0x01	; 1
      ec:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <TrafficState>
		}
	}
}
      f0:	0f 90       	pop	r0
      f2:	0f 90       	pop	r0
      f4:	0f 90       	pop	r0
      f6:	0f 90       	pop	r0
      f8:	df 91       	pop	r29
      fa:	cf 91       	pop	r28
      fc:	08 95       	ret

000000fe <ChangeToGreen>:
void ChangeToGreen(void)
{
	LED_TurnOffLED(CAR_RED_LED);
      fe:	85 e0       	ldi	r24, 0x05	; 5
     100:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LED_TurnOffLED>
	LED_TurnOffLED(CAR_YELLOW_LED);
     104:	84 e0       	ldi	r24, 0x04	; 4
     106:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LED_TurnOffLED>
	LED_TurnOnLED(CAR_GREEN_LED);
     10a:	83 e0       	ldi	r24, 0x03	; 3
     10c:	0e 94 a1 03 	call	0x742	; 0x742 <LED_TurnOnLED>
	LED_TurnOnLED(PEDESTRIAN_RED_LED);
     110:	82 e0       	ldi	r24, 0x02	; 2
     112:	0e 94 a1 03 	call	0x742	; 0x742 <LED_TurnOnLED>
	LED_TurnOffLED(PEDESTRIAN_YELLOW_LED);
     116:	81 e0       	ldi	r24, 0x01	; 1
     118:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LED_TurnOffLED>
	LED_TurnOffLED(PEDESTRIAN_GREEN_LED);
     11c:	80 e0       	ldi	r24, 0x00	; 0
     11e:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LED_TurnOffLED>
	YellowState = LOW;
     122:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <YellowState>
     126:	08 95       	ret

00000128 <ChangeToYellow>:
}
void ChangeToYellow(void)
{
	LED_TurnOffLED(CAR_RED_LED);
     128:	85 e0       	ldi	r24, 0x05	; 5
     12a:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LED_TurnOffLED>
	LED_TurnOnLED(CAR_YELLOW_LED);
     12e:	84 e0       	ldi	r24, 0x04	; 4
     130:	0e 94 a1 03 	call	0x742	; 0x742 <LED_TurnOnLED>
	LED_TurnOffLED(CAR_GREEN_LED);
     134:	83 e0       	ldi	r24, 0x03	; 3
     136:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LED_TurnOffLED>
	LED_TurnOffLED(PEDESTRIAN_RED_LED);
     13a:	82 e0       	ldi	r24, 0x02	; 2
     13c:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LED_TurnOffLED>
	LED_TurnOnLED(PEDESTRIAN_YELLOW_LED);
     140:	81 e0       	ldi	r24, 0x01	; 1
     142:	0e 94 a1 03 	call	0x742	; 0x742 <LED_TurnOnLED>
	LED_TurnOffLED(PEDESTRIAN_GREEN_LED);
     146:	80 e0       	ldi	r24, 0x00	; 0
     148:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LED_TurnOffLED>
	YellowState = HIGH;
     14c:	81 e0       	ldi	r24, 0x01	; 1
     14e:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <YellowState>
     152:	08 95       	ret

00000154 <ChangeToRed>:
}
void ChangeToRed(void)
{
	LED_TurnOnLED(CAR_RED_LED);
     154:	85 e0       	ldi	r24, 0x05	; 5
     156:	0e 94 a1 03 	call	0x742	; 0x742 <LED_TurnOnLED>
	LED_TurnOffLED(CAR_YELLOW_LED);
     15a:	84 e0       	ldi	r24, 0x04	; 4
     15c:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LED_TurnOffLED>
	LED_TurnOffLED(CAR_GREEN_LED);
     160:	83 e0       	ldi	r24, 0x03	; 3
     162:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LED_TurnOffLED>
	LED_TurnOffLED(PEDESTRIAN_RED_LED);
     166:	82 e0       	ldi	r24, 0x02	; 2
     168:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LED_TurnOffLED>
	LED_TurnOffLED(PEDESTRIAN_YELLOW_LED);
     16c:	81 e0       	ldi	r24, 0x01	; 1
     16e:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LED_TurnOffLED>
	LED_TurnOnLED(PEDESTRIAN_GREEN_LED);
     172:	80 e0       	ldi	r24, 0x00	; 0
     174:	0e 94 a1 03 	call	0x742	; 0x742 <LED_TurnOnLED>
	YellowState = LOW;
     178:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <YellowState>
     17c:	08 95       	ret

0000017e <ToggleYellowLight>:
}
void ToggleYellowLight(void)
{
	LED_ToggleLED(CAR_YELLOW_LED);
     17e:	84 e0       	ldi	r24, 0x04	; 4
     180:	0e 94 05 04 	call	0x80a	; 0x80a <LED_ToggleLED>
	LED_ToggleLED(PEDESTRIAN_YELLOW_LED);
     184:	81 e0       	ldi	r24, 0x01	; 1
     186:	0e 94 05 04 	call	0x80a	; 0x80a <LED_ToggleLED>
	YellowState = !YellowState;
     18a:	81 e0       	ldi	r24, 0x01	; 1
     18c:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <YellowState>
     190:	91 11       	cpse	r25, r1
     192:	80 e0       	ldi	r24, 0x00	; 0
     194:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <YellowState>
     198:	08 95       	ret

0000019a <AppInit>:
/************************************************************************/
/* Global Functions Definitions                                           */
/************************************************************************/
void AppInit()
{
	LED_InitLEDs();
     19a:	0e 94 82 03 	call	0x704	; 0x704 <LED_InitLEDs>
	Buttons_Init();
     19e:	0e 94 6d 03 	call	0x6da	; 0x6da <Buttons_Init>
	Timer_ConfigTimer0(NORMAL);
     1a2:	80 e0       	ldi	r24, 0x00	; 0
     1a4:	0e 94 3e 07 	call	0xe7c	; 0xe7c <Timer_ConfigTimer0>
	Timer_ConfigTimer2(NORMAL);
     1a8:	80 e0       	ldi	r24, 0x00	; 0
     1aa:	0e 94 e5 07 	call	0xfca	; 0xfca <Timer_ConfigTimer2>
	Interrupts_EnableGlobalInterrupts();
     1ae:	0e 94 dd 05 	call	0xbba	; 0xbba <Interrupts_EnableGlobalInterrupts>
	
	Buttons_Start(&ButtonResponse);
     1b2:	80 e5       	ldi	r24, 0x50	; 80
     1b4:	90 e0       	ldi	r25, 0x00	; 0
     1b6:	0e 94 77 03 	call	0x6ee	; 0x6ee <Buttons_Start>
	ChangeToGreen();
     1ba:	0e 94 7f 00 	call	0xfe	; 0xfe <ChangeToGreen>
     1be:	08 95       	ret

000001c0 <AppRun>:
	
}
void AppRun()
{
     1c0:	cf 92       	push	r12
     1c2:	df 92       	push	r13
     1c4:	ef 92       	push	r14
     1c6:	ff 92       	push	r15
	switch(TrafficState)
     1c8:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <TrafficState>
     1cc:	88 23       	and	r24, r24
     1ce:	21 f0       	breq	.+8      	; 0x1d8 <AppRun+0x18>
     1d0:	81 30       	cpi	r24, 0x01	; 1
     1d2:	09 f4       	brne	.+2      	; 0x1d6 <AppRun+0x16>
     1d4:	94 c1       	rjmp	.+808    	; 0x4fe <__EEPROM_REGION_LENGTH__+0xfe>
     1d6:	7c c2       	rjmp	.+1272   	; 0x6d0 <__EEPROM_REGION_LENGTH__+0x2d0>
	{
		case NORMAL_MODE:
			switch (CarsLight)
     1d8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     1dc:	81 30       	cpi	r24, 0x01	; 1
     1de:	09 f4       	brne	.+2      	; 0x1e2 <AppRun+0x22>
     1e0:	04 c1       	rjmp	.+520    	; 0x3ea <AppRun+0x22a>
     1e2:	08 f4       	brcc	.+2      	; 0x1e6 <AppRun+0x26>
     1e4:	c7 c0       	rjmp	.+398    	; 0x374 <AppRun+0x1b4>
     1e6:	82 30       	cpi	r24, 0x02	; 2
     1e8:	f1 f1       	breq	.+124    	; 0x266 <AppRun+0xa6>
     1ea:	83 30       	cpi	r24, 0x03	; 3
     1ec:	09 f0       	breq	.+2      	; 0x1f0 <AppRun+0x30>
     1ee:	84 c1       	rjmp	.+776    	; 0x4f8 <__EEPROM_REGION_LENGTH__+0xf8>
			{
				case GREEN_LIGHT:
					if (LightsTimer >= CHANGE_TIME)
     1f0:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <LightsTimer>
     1f4:	70 91 67 00 	lds	r23, 0x0067	; 0x800067 <LightsTimer+0x1>
     1f8:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <LightsTimer+0x2>
     1fc:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <LightsTimer+0x3>
     200:	20 e0       	ldi	r18, 0x00	; 0
     202:	30 e8       	ldi	r19, 0x80	; 128
     204:	4b eb       	ldi	r20, 0xBB	; 187
     206:	55 e4       	ldi	r21, 0x45	; 69
     208:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <__gesf2>
     20c:	88 23       	and	r24, r24
     20e:	74 f0       	brlt	.+28     	; 0x22c <AppRun+0x6c>
					{
						LightsTimer = 0.0F;
     210:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <LightsTimer>
     214:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <LightsTimer+0x1>
     218:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <LightsTimer+0x2>
     21c:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <LightsTimer+0x3>
						CarsLight = YELLOWTORED_LIGHT;
     220:	82 e0       	ldi	r24, 0x02	; 2
     222:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
						ChangeToYellow();
     226:	0e 94 94 00 	call	0x128	; 0x128 <ChangeToYellow>
     22a:	66 c1       	rjmp	.+716    	; 0x4f8 <__EEPROM_REGION_LENGTH__+0xf8>
					}
					else
					{
						Timer_BusyDelaymsTimer0(100);
     22c:	60 e0       	ldi	r22, 0x00	; 0
     22e:	70 e0       	ldi	r23, 0x00	; 0
     230:	88 ec       	ldi	r24, 0xC8	; 200
     232:	92 e4       	ldi	r25, 0x42	; 66
     234:	0e 94 8a 07 	call	0xf14	; 0xf14 <Timer_BusyDelaymsTimer0>
						LightsTimer += 100.0;
     238:	20 e0       	ldi	r18, 0x00	; 0
     23a:	30 e0       	ldi	r19, 0x00	; 0
     23c:	48 ec       	ldi	r20, 0xC8	; 200
     23e:	52 e4       	ldi	r21, 0x42	; 66
     240:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <LightsTimer>
     244:	70 91 67 00 	lds	r23, 0x0067	; 0x800067 <LightsTimer+0x1>
     248:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <LightsTimer+0x2>
     24c:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <LightsTimer+0x3>
     250:	0e 94 b4 08 	call	0x1168	; 0x1168 <__addsf3>
     254:	60 93 66 00 	sts	0x0066, r22	; 0x800066 <LightsTimer>
     258:	70 93 67 00 	sts	0x0067, r23	; 0x800067 <LightsTimer+0x1>
     25c:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <LightsTimer+0x2>
     260:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <LightsTimer+0x3>
     264:	49 c1       	rjmp	.+658    	; 0x4f8 <__EEPROM_REGION_LENGTH__+0xf8>
					}
					break;
				case YELLOWTORED_LIGHT:
					if (LightsTimer >= CHANGE_TIME)
     266:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <LightsTimer>
     26a:	70 91 67 00 	lds	r23, 0x0067	; 0x800067 <LightsTimer+0x1>
     26e:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <LightsTimer+0x2>
     272:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <LightsTimer+0x3>
     276:	20 e0       	ldi	r18, 0x00	; 0
     278:	30 e8       	ldi	r19, 0x80	; 128
     27a:	4b eb       	ldi	r20, 0xBB	; 187
     27c:	55 e4       	ldi	r21, 0x45	; 69
     27e:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <__gesf2>
     282:	88 23       	and	r24, r24
     284:	ac f0       	brlt	.+42     	; 0x2b0 <AppRun+0xf0>
					{
						LightsTimer = 0.0F;
     286:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <LightsTimer>
     28a:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <LightsTimer+0x1>
     28e:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <LightsTimer+0x2>
     292:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <LightsTimer+0x3>
						BlinkTimer = 0.0F;
     296:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
     29a:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__data_end+0x1>
     29e:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__data_end+0x2>
     2a2:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <__data_end+0x3>
						CarsLight = RED_LIGHT;
     2a6:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
						ChangeToRed();
     2aa:	0e 94 aa 00 	call	0x154	; 0x154 <ChangeToRed>
     2ae:	24 c1       	rjmp	.+584    	; 0x4f8 <__EEPROM_REGION_LENGTH__+0xf8>
					}
					else if (((BlinkTimer >= BLINK_OFF_TIME) && (YellowState == LOW)) || ((BlinkTimer >= BLINK_ON_TIME) && (YellowState == HIGH)))
     2b0:	c0 90 62 00 	lds	r12, 0x0062	; 0x800062 <__data_end>
     2b4:	d0 90 63 00 	lds	r13, 0x0063	; 0x800063 <__data_end+0x1>
     2b8:	e0 90 64 00 	lds	r14, 0x0064	; 0x800064 <__data_end+0x2>
     2bc:	f0 90 65 00 	lds	r15, 0x0065	; 0x800065 <__data_end+0x3>
     2c0:	20 e0       	ldi	r18, 0x00	; 0
     2c2:	30 e0       	ldi	r19, 0x00	; 0
     2c4:	48 e4       	ldi	r20, 0x48	; 72
     2c6:	53 e4       	ldi	r21, 0x43	; 67
     2c8:	c7 01       	movw	r24, r14
     2ca:	b6 01       	movw	r22, r12
     2cc:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <__gesf2>
     2d0:	88 23       	and	r24, r24
     2d2:	24 f0       	brlt	.+8      	; 0x2dc <AppRun+0x11c>
     2d4:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <YellowState>
     2d8:	88 23       	and	r24, r24
     2da:	71 f0       	breq	.+28     	; 0x2f8 <AppRun+0x138>
     2dc:	20 e0       	ldi	r18, 0x00	; 0
     2de:	30 e0       	ldi	r19, 0x00	; 0
     2e0:	48 e4       	ldi	r20, 0x48	; 72
     2e2:	54 e4       	ldi	r21, 0x44	; 68
     2e4:	c7 01       	movw	r24, r14
     2e6:	b6 01       	movw	r22, r12
     2e8:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <__gesf2>
     2ec:	88 23       	and	r24, r24
     2ee:	7c f0       	brlt	.+30     	; 0x30e <AppRun+0x14e>
     2f0:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <YellowState>
     2f4:	81 30       	cpi	r24, 0x01	; 1
     2f6:	59 f4       	brne	.+22     	; 0x30e <AppRun+0x14e>
					{
						BlinkTimer = 0.0F;
     2f8:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
     2fc:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__data_end+0x1>
     300:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__data_end+0x2>
     304:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <__data_end+0x3>
						ToggleYellowLight();
     308:	0e 94 bf 00 	call	0x17e	; 0x17e <ToggleYellowLight>
     30c:	f5 c0       	rjmp	.+490    	; 0x4f8 <__EEPROM_REGION_LENGTH__+0xf8>
					}
					else
					{
						Timer_BusyDelaymsTimer0(100);
     30e:	60 e0       	ldi	r22, 0x00	; 0
     310:	70 e0       	ldi	r23, 0x00	; 0
     312:	88 ec       	ldi	r24, 0xC8	; 200
     314:	92 e4       	ldi	r25, 0x42	; 66
     316:	0e 94 8a 07 	call	0xf14	; 0xf14 <Timer_BusyDelaymsTimer0>
						LightsTimer += 100.0;
     31a:	20 e0       	ldi	r18, 0x00	; 0
     31c:	30 e0       	ldi	r19, 0x00	; 0
     31e:	48 ec       	ldi	r20, 0xC8	; 200
     320:	52 e4       	ldi	r21, 0x42	; 66
     322:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <LightsTimer>
     326:	70 91 67 00 	lds	r23, 0x0067	; 0x800067 <LightsTimer+0x1>
     32a:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <LightsTimer+0x2>
     32e:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <LightsTimer+0x3>
     332:	0e 94 b4 08 	call	0x1168	; 0x1168 <__addsf3>
     336:	60 93 66 00 	sts	0x0066, r22	; 0x800066 <LightsTimer>
     33a:	70 93 67 00 	sts	0x0067, r23	; 0x800067 <LightsTimer+0x1>
     33e:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <LightsTimer+0x2>
     342:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <LightsTimer+0x3>
						BlinkTimer += 100.0F;
     346:	20 e0       	ldi	r18, 0x00	; 0
     348:	30 e0       	ldi	r19, 0x00	; 0
     34a:	48 ec       	ldi	r20, 0xC8	; 200
     34c:	52 e4       	ldi	r21, 0x42	; 66
     34e:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <__data_end>
     352:	70 91 63 00 	lds	r23, 0x0063	; 0x800063 <__data_end+0x1>
     356:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__data_end+0x2>
     35a:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <__data_end+0x3>
     35e:	0e 94 b4 08 	call	0x1168	; 0x1168 <__addsf3>
     362:	60 93 62 00 	sts	0x0062, r22	; 0x800062 <__data_end>
     366:	70 93 63 00 	sts	0x0063, r23	; 0x800063 <__data_end+0x1>
     36a:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__data_end+0x2>
     36e:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <__data_end+0x3>
     372:	c2 c0       	rjmp	.+388    	; 0x4f8 <__EEPROM_REGION_LENGTH__+0xf8>
					}
					break;
				case RED_LIGHT:
					if (LightsTimer >= CHANGE_TIME)
     374:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <LightsTimer>
     378:	70 91 67 00 	lds	r23, 0x0067	; 0x800067 <LightsTimer+0x1>
     37c:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <LightsTimer+0x2>
     380:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <LightsTimer+0x3>
     384:	20 e0       	ldi	r18, 0x00	; 0
     386:	30 e8       	ldi	r19, 0x80	; 128
     388:	4b eb       	ldi	r20, 0xBB	; 187
     38a:	55 e4       	ldi	r21, 0x45	; 69
     38c:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <__gesf2>
     390:	88 23       	and	r24, r24
     392:	74 f0       	brlt	.+28     	; 0x3b0 <AppRun+0x1f0>
					{
						LightsTimer = 0.0F;
     394:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <LightsTimer>
     398:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <LightsTimer+0x1>
     39c:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <LightsTimer+0x2>
     3a0:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <LightsTimer+0x3>
						CarsLight = YELLOWTOGREEN_LIGHT;
     3a4:	81 e0       	ldi	r24, 0x01	; 1
     3a6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
						ChangeToYellow();
     3aa:	0e 94 94 00 	call	0x128	; 0x128 <ChangeToYellow>
     3ae:	a4 c0       	rjmp	.+328    	; 0x4f8 <__EEPROM_REGION_LENGTH__+0xf8>
					}
					else
					{
						Timer_BusyDelaymsTimer0(100);
     3b0:	60 e0       	ldi	r22, 0x00	; 0
     3b2:	70 e0       	ldi	r23, 0x00	; 0
     3b4:	88 ec       	ldi	r24, 0xC8	; 200
     3b6:	92 e4       	ldi	r25, 0x42	; 66
     3b8:	0e 94 8a 07 	call	0xf14	; 0xf14 <Timer_BusyDelaymsTimer0>
						LightsTimer += 100.0;
     3bc:	20 e0       	ldi	r18, 0x00	; 0
     3be:	30 e0       	ldi	r19, 0x00	; 0
     3c0:	48 ec       	ldi	r20, 0xC8	; 200
     3c2:	52 e4       	ldi	r21, 0x42	; 66
     3c4:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <LightsTimer>
     3c8:	70 91 67 00 	lds	r23, 0x0067	; 0x800067 <LightsTimer+0x1>
     3cc:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <LightsTimer+0x2>
     3d0:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <LightsTimer+0x3>
     3d4:	0e 94 b4 08 	call	0x1168	; 0x1168 <__addsf3>
     3d8:	60 93 66 00 	sts	0x0066, r22	; 0x800066 <LightsTimer>
     3dc:	70 93 67 00 	sts	0x0067, r23	; 0x800067 <LightsTimer+0x1>
     3e0:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <LightsTimer+0x2>
     3e4:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <LightsTimer+0x3>
     3e8:	87 c0       	rjmp	.+270    	; 0x4f8 <__EEPROM_REGION_LENGTH__+0xf8>
					}
					break;
				case YELLOWTOGREEN_LIGHT:
					if (LightsTimer >= CHANGE_TIME)
     3ea:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <LightsTimer>
     3ee:	70 91 67 00 	lds	r23, 0x0067	; 0x800067 <LightsTimer+0x1>
     3f2:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <LightsTimer+0x2>
     3f6:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <LightsTimer+0x3>
     3fa:	20 e0       	ldi	r18, 0x00	; 0
     3fc:	30 e8       	ldi	r19, 0x80	; 128
     3fe:	4b eb       	ldi	r20, 0xBB	; 187
     400:	55 e4       	ldi	r21, 0x45	; 69
     402:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <__gesf2>
     406:	88 23       	and	r24, r24
     408:	b4 f0       	brlt	.+44     	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
					{
						LightsTimer = 0.0F;
     40a:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <LightsTimer>
     40e:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <LightsTimer+0x1>
     412:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <LightsTimer+0x2>
     416:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <LightsTimer+0x3>
						BlinkTimer = 0.0F;
     41a:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
     41e:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__data_end+0x1>
     422:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__data_end+0x2>
     426:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <__data_end+0x3>
						CarsLight = GREEN_LIGHT;
     42a:	83 e0       	ldi	r24, 0x03	; 3
     42c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
						ChangeToGreen();
     430:	0e 94 7f 00 	call	0xfe	; 0xfe <ChangeToGreen>
     434:	61 c0       	rjmp	.+194    	; 0x4f8 <__EEPROM_REGION_LENGTH__+0xf8>
					}
					else if (((BlinkTimer >= BLINK_OFF_TIME) && (YellowState == LOW)) || ((BlinkTimer >= BLINK_ON_TIME) && (YellowState == HIGH)))
     436:	c0 90 62 00 	lds	r12, 0x0062	; 0x800062 <__data_end>
     43a:	d0 90 63 00 	lds	r13, 0x0063	; 0x800063 <__data_end+0x1>
     43e:	e0 90 64 00 	lds	r14, 0x0064	; 0x800064 <__data_end+0x2>
     442:	f0 90 65 00 	lds	r15, 0x0065	; 0x800065 <__data_end+0x3>
     446:	20 e0       	ldi	r18, 0x00	; 0
     448:	30 e0       	ldi	r19, 0x00	; 0
     44a:	48 e4       	ldi	r20, 0x48	; 72
     44c:	53 e4       	ldi	r21, 0x43	; 67
     44e:	c7 01       	movw	r24, r14
     450:	b6 01       	movw	r22, r12
     452:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <__gesf2>
     456:	88 23       	and	r24, r24
     458:	24 f0       	brlt	.+8      	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
     45a:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <YellowState>
     45e:	88 23       	and	r24, r24
     460:	71 f0       	breq	.+28     	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
     462:	20 e0       	ldi	r18, 0x00	; 0
     464:	30 e0       	ldi	r19, 0x00	; 0
     466:	48 e4       	ldi	r20, 0x48	; 72
     468:	54 e4       	ldi	r21, 0x44	; 68
     46a:	c7 01       	movw	r24, r14
     46c:	b6 01       	movw	r22, r12
     46e:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <__gesf2>
     472:	88 23       	and	r24, r24
     474:	7c f0       	brlt	.+30     	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
     476:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <YellowState>
     47a:	81 30       	cpi	r24, 0x01	; 1
     47c:	59 f4       	brne	.+22     	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
					{
						BlinkTimer = 0.0F;
     47e:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
     482:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__data_end+0x1>
     486:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__data_end+0x2>
     48a:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <__data_end+0x3>
						ToggleYellowLight();
     48e:	0e 94 bf 00 	call	0x17e	; 0x17e <ToggleYellowLight>
     492:	32 c0       	rjmp	.+100    	; 0x4f8 <__EEPROM_REGION_LENGTH__+0xf8>
					}
					else
					{
						Timer_BusyDelaymsTimer0(100);
     494:	60 e0       	ldi	r22, 0x00	; 0
     496:	70 e0       	ldi	r23, 0x00	; 0
     498:	88 ec       	ldi	r24, 0xC8	; 200
     49a:	92 e4       	ldi	r25, 0x42	; 66
     49c:	0e 94 8a 07 	call	0xf14	; 0xf14 <Timer_BusyDelaymsTimer0>
						LightsTimer += 100.0;
     4a0:	20 e0       	ldi	r18, 0x00	; 0
     4a2:	30 e0       	ldi	r19, 0x00	; 0
     4a4:	48 ec       	ldi	r20, 0xC8	; 200
     4a6:	52 e4       	ldi	r21, 0x42	; 66
     4a8:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <LightsTimer>
     4ac:	70 91 67 00 	lds	r23, 0x0067	; 0x800067 <LightsTimer+0x1>
     4b0:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <LightsTimer+0x2>
     4b4:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <LightsTimer+0x3>
     4b8:	0e 94 b4 08 	call	0x1168	; 0x1168 <__addsf3>
     4bc:	60 93 66 00 	sts	0x0066, r22	; 0x800066 <LightsTimer>
     4c0:	70 93 67 00 	sts	0x0067, r23	; 0x800067 <LightsTimer+0x1>
     4c4:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <LightsTimer+0x2>
     4c8:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <LightsTimer+0x3>
						BlinkTimer += 100.0F;
     4cc:	20 e0       	ldi	r18, 0x00	; 0
     4ce:	30 e0       	ldi	r19, 0x00	; 0
     4d0:	48 ec       	ldi	r20, 0xC8	; 200
     4d2:	52 e4       	ldi	r21, 0x42	; 66
     4d4:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <__data_end>
     4d8:	70 91 63 00 	lds	r23, 0x0063	; 0x800063 <__data_end+0x1>
     4dc:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__data_end+0x2>
     4e0:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <__data_end+0x3>
     4e4:	0e 94 b4 08 	call	0x1168	; 0x1168 <__addsf3>
     4e8:	60 93 62 00 	sts	0x0062, r22	; 0x800062 <__data_end>
     4ec:	70 93 63 00 	sts	0x0063, r23	; 0x800063 <__data_end+0x1>
     4f0:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__data_end+0x2>
     4f4:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <__data_end+0x3>
					}
					break;
			}
			PrevTrafficState = NORMAL_MODE;
     4f8:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <PrevTrafficState>
			break;
     4fc:	e9 c0       	rjmp	.+466    	; 0x6d0 <__EEPROM_REGION_LENGTH__+0x2d0>
		case PEDESTRIAN_MODE:
			if(PrevTrafficState != PEDESTRIAN_MODE)
     4fe:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <PrevTrafficState>
     502:	81 30       	cpi	r24, 0x01	; 1
     504:	b9 f0       	breq	.+46     	; 0x534 <__EEPROM_REGION_LENGTH__+0x134>
			{
				switch (CarsLight)
     506:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     50a:	81 30       	cpi	r24, 0x01	; 1
     50c:	81 f0       	breq	.+32     	; 0x52e <__EEPROM_REGION_LENGTH__+0x12e>
     50e:	83 30       	cpi	r24, 0x03	; 3
     510:	89 f4       	brne	.+34     	; 0x534 <__EEPROM_REGION_LENGTH__+0x134>
				{
					case GREEN_LIGHT:
						LightsTimer = 0.0F;
     512:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <LightsTimer>
     516:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <LightsTimer+0x1>
     51a:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <LightsTimer+0x2>
     51e:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <LightsTimer+0x3>
						CarsLight = YELLOWTORED_LIGHT;
     522:	82 e0       	ldi	r24, 0x02	; 2
     524:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
						ChangeToYellow();
     528:	0e 94 94 00 	call	0x128	; 0x128 <ChangeToYellow>
						break;
     52c:	03 c0       	rjmp	.+6      	; 0x534 <__EEPROM_REGION_LENGTH__+0x134>
					case YELLOWTORED_LIGHT:
						break;
					case YELLOWTOGREEN_LIGHT:
						CarsLight = YELLOWTORED_LIGHT;
     52e:	82 e0       	ldi	r24, 0x02	; 2
     530:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
						break;
					case RED_LIGHT:
						break;
				}
			}
			switch (CarsLight)
     534:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     538:	88 23       	and	r24, r24
     53a:	09 f4       	brne	.+2      	; 0x53e <__EEPROM_REGION_LENGTH__+0x13e>
     53c:	8a c0       	rjmp	.+276    	; 0x652 <__EEPROM_REGION_LENGTH__+0x252>
     53e:	82 30       	cpi	r24, 0x02	; 2
     540:	09 f0       	breq	.+2      	; 0x544 <__EEPROM_REGION_LENGTH__+0x144>
     542:	c3 c0       	rjmp	.+390    	; 0x6ca <__EEPROM_REGION_LENGTH__+0x2ca>
			{
				case YELLOWTORED_LIGHT:
					if (LightsTimer >= CHANGE_TIME)
     544:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <LightsTimer>
     548:	70 91 67 00 	lds	r23, 0x0067	; 0x800067 <LightsTimer+0x1>
     54c:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <LightsTimer+0x2>
     550:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <LightsTimer+0x3>
     554:	20 e0       	ldi	r18, 0x00	; 0
     556:	30 e8       	ldi	r19, 0x80	; 128
     558:	4b eb       	ldi	r20, 0xBB	; 187
     55a:	55 e4       	ldi	r21, 0x45	; 69
     55c:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <__gesf2>
     560:	88 23       	and	r24, r24
     562:	ac f0       	brlt	.+42     	; 0x58e <__EEPROM_REGION_LENGTH__+0x18e>
					{
						LightsTimer = 0.0F;
     564:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <LightsTimer>
     568:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <LightsTimer+0x1>
     56c:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <LightsTimer+0x2>
     570:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <LightsTimer+0x3>
						BlinkTimer = 0.0F;
     574:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
     578:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__data_end+0x1>
     57c:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__data_end+0x2>
     580:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <__data_end+0x3>
						CarsLight = RED_LIGHT;
     584:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
						ChangeToRed();
     588:	0e 94 aa 00 	call	0x154	; 0x154 <ChangeToRed>
     58c:	9e c0       	rjmp	.+316    	; 0x6ca <__EEPROM_REGION_LENGTH__+0x2ca>
					}
					else if (((BlinkTimer >= BLINK_OFF_TIME) && (YellowState == LOW)) || ((BlinkTimer >= BLINK_ON_TIME) && (YellowState == HIGH)))
     58e:	c0 90 62 00 	lds	r12, 0x0062	; 0x800062 <__data_end>
     592:	d0 90 63 00 	lds	r13, 0x0063	; 0x800063 <__data_end+0x1>
     596:	e0 90 64 00 	lds	r14, 0x0064	; 0x800064 <__data_end+0x2>
     59a:	f0 90 65 00 	lds	r15, 0x0065	; 0x800065 <__data_end+0x3>
     59e:	20 e0       	ldi	r18, 0x00	; 0
     5a0:	30 e0       	ldi	r19, 0x00	; 0
     5a2:	48 e4       	ldi	r20, 0x48	; 72
     5a4:	53 e4       	ldi	r21, 0x43	; 67
     5a6:	c7 01       	movw	r24, r14
     5a8:	b6 01       	movw	r22, r12
     5aa:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <__gesf2>
     5ae:	88 23       	and	r24, r24
     5b0:	24 f0       	brlt	.+8      	; 0x5ba <__EEPROM_REGION_LENGTH__+0x1ba>
     5b2:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <YellowState>
     5b6:	88 23       	and	r24, r24
     5b8:	71 f0       	breq	.+28     	; 0x5d6 <__EEPROM_REGION_LENGTH__+0x1d6>
     5ba:	20 e0       	ldi	r18, 0x00	; 0
     5bc:	30 e0       	ldi	r19, 0x00	; 0
     5be:	48 e4       	ldi	r20, 0x48	; 72
     5c0:	54 e4       	ldi	r21, 0x44	; 68
     5c2:	c7 01       	movw	r24, r14
     5c4:	b6 01       	movw	r22, r12
     5c6:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <__gesf2>
     5ca:	88 23       	and	r24, r24
     5cc:	7c f0       	brlt	.+30     	; 0x5ec <__EEPROM_REGION_LENGTH__+0x1ec>
     5ce:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <YellowState>
     5d2:	81 30       	cpi	r24, 0x01	; 1
     5d4:	59 f4       	brne	.+22     	; 0x5ec <__EEPROM_REGION_LENGTH__+0x1ec>
					{
						BlinkTimer = 0.0F;
     5d6:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
     5da:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__data_end+0x1>
     5de:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__data_end+0x2>
     5e2:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <__data_end+0x3>
						ToggleYellowLight();
     5e6:	0e 94 bf 00 	call	0x17e	; 0x17e <ToggleYellowLight>
     5ea:	6f c0       	rjmp	.+222    	; 0x6ca <__EEPROM_REGION_LENGTH__+0x2ca>
					}
					else
					{
						Timer_BusyDelaymsTimer0(100);
     5ec:	60 e0       	ldi	r22, 0x00	; 0
     5ee:	70 e0       	ldi	r23, 0x00	; 0
     5f0:	88 ec       	ldi	r24, 0xC8	; 200
     5f2:	92 e4       	ldi	r25, 0x42	; 66
     5f4:	0e 94 8a 07 	call	0xf14	; 0xf14 <Timer_BusyDelaymsTimer0>
						LightsTimer += 100.0;
     5f8:	20 e0       	ldi	r18, 0x00	; 0
     5fa:	30 e0       	ldi	r19, 0x00	; 0
     5fc:	48 ec       	ldi	r20, 0xC8	; 200
     5fe:	52 e4       	ldi	r21, 0x42	; 66
     600:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <LightsTimer>
     604:	70 91 67 00 	lds	r23, 0x0067	; 0x800067 <LightsTimer+0x1>
     608:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <LightsTimer+0x2>
     60c:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <LightsTimer+0x3>
     610:	0e 94 b4 08 	call	0x1168	; 0x1168 <__addsf3>
     614:	60 93 66 00 	sts	0x0066, r22	; 0x800066 <LightsTimer>
     618:	70 93 67 00 	sts	0x0067, r23	; 0x800067 <LightsTimer+0x1>
     61c:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <LightsTimer+0x2>
     620:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <LightsTimer+0x3>
						BlinkTimer += 100.0F;
     624:	20 e0       	ldi	r18, 0x00	; 0
     626:	30 e0       	ldi	r19, 0x00	; 0
     628:	48 ec       	ldi	r20, 0xC8	; 200
     62a:	52 e4       	ldi	r21, 0x42	; 66
     62c:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <__data_end>
     630:	70 91 63 00 	lds	r23, 0x0063	; 0x800063 <__data_end+0x1>
     634:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__data_end+0x2>
     638:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <__data_end+0x3>
     63c:	0e 94 b4 08 	call	0x1168	; 0x1168 <__addsf3>
     640:	60 93 62 00 	sts	0x0062, r22	; 0x800062 <__data_end>
     644:	70 93 63 00 	sts	0x0063, r23	; 0x800063 <__data_end+0x1>
     648:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__data_end+0x2>
     64c:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <__data_end+0x3>
     650:	3c c0       	rjmp	.+120    	; 0x6ca <__EEPROM_REGION_LENGTH__+0x2ca>
					}
					break;
				case RED_LIGHT:
					if (LightsTimer >= CHANGE_TIME)
     652:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <LightsTimer>
     656:	70 91 67 00 	lds	r23, 0x0067	; 0x800067 <LightsTimer+0x1>
     65a:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <LightsTimer+0x2>
     65e:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <LightsTimer+0x3>
     662:	20 e0       	ldi	r18, 0x00	; 0
     664:	30 e8       	ldi	r19, 0x80	; 128
     666:	4b eb       	ldi	r20, 0xBB	; 187
     668:	55 e4       	ldi	r21, 0x45	; 69
     66a:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <__gesf2>
     66e:	88 23       	and	r24, r24
     670:	84 f0       	brlt	.+32     	; 0x692 <__EEPROM_REGION_LENGTH__+0x292>
					{
						LightsTimer = 0.0F;
     672:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <LightsTimer>
     676:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <LightsTimer+0x1>
     67a:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <LightsTimer+0x2>
     67e:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <LightsTimer+0x3>
						CarsLight = YELLOWTOGREEN_LIGHT;
     682:	81 e0       	ldi	r24, 0x01	; 1
     684:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
						ChangeToYellow();
     688:	0e 94 94 00 	call	0x128	; 0x128 <ChangeToYellow>
						TrafficState = NORMAL_MODE;
     68c:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <TrafficState>
     690:	1c c0       	rjmp	.+56     	; 0x6ca <__EEPROM_REGION_LENGTH__+0x2ca>
					}
					else
					{
						Timer_BusyDelaymsTimer0(100);
     692:	60 e0       	ldi	r22, 0x00	; 0
     694:	70 e0       	ldi	r23, 0x00	; 0
     696:	88 ec       	ldi	r24, 0xC8	; 200
     698:	92 e4       	ldi	r25, 0x42	; 66
     69a:	0e 94 8a 07 	call	0xf14	; 0xf14 <Timer_BusyDelaymsTimer0>
						LightsTimer += 100.0;
     69e:	20 e0       	ldi	r18, 0x00	; 0
     6a0:	30 e0       	ldi	r19, 0x00	; 0
     6a2:	48 ec       	ldi	r20, 0xC8	; 200
     6a4:	52 e4       	ldi	r21, 0x42	; 66
     6a6:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <LightsTimer>
     6aa:	70 91 67 00 	lds	r23, 0x0067	; 0x800067 <LightsTimer+0x1>
     6ae:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <LightsTimer+0x2>
     6b2:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <LightsTimer+0x3>
     6b6:	0e 94 b4 08 	call	0x1168	; 0x1168 <__addsf3>
     6ba:	60 93 66 00 	sts	0x0066, r22	; 0x800066 <LightsTimer>
     6be:	70 93 67 00 	sts	0x0067, r23	; 0x800067 <LightsTimer+0x1>
     6c2:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <LightsTimer+0x2>
     6c6:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <LightsTimer+0x3>
					}
					break;
				default:
					break;
			}
			PrevTrafficState = PEDESTRIAN_MODE;
     6ca:	81 e0       	ldi	r24, 0x01	; 1
     6cc:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <PrevTrafficState>
			break;
	}
     6d0:	ff 90       	pop	r15
     6d2:	ef 90       	pop	r14
     6d4:	df 90       	pop	r13
     6d6:	cf 90       	pop	r12
     6d8:	08 95       	ret

000006da <Buttons_Init>:
/************************************************************************/
/* Functions Definitions		                                        */
/************************************************************************/
void Buttons_Init()
{
	DIO_InitPin(PORTD, 2, INPUT);
     6da:	40 e0       	ldi	r20, 0x00	; 0
     6dc:	62 e0       	ldi	r22, 0x02	; 2
     6de:	83 e0       	ldi	r24, 0x03	; 3
     6e0:	0e 94 36 04 	call	0x86c	; 0x86c <DIO_InitPin>
	Interrupts_ConfigExtInterrupt(INT0, CHANGE);
     6e4:	62 e0       	ldi	r22, 0x02	; 2
     6e6:	80 e0       	ldi	r24, 0x00	; 0
     6e8:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <Interrupts_ConfigExtInterrupt>
     6ec:	08 95       	ret

000006ee <Buttons_Start>:
}
void Buttons_Start(void (*CallBack)(void))
{
	Interrupts_RegisterCallbackExtInt0(CallBack);
     6ee:	0e 94 4e 06 	call	0xc9c	; 0xc9c <Interrupts_RegisterCallbackExtInt0>
	Interrupts_EnableExtInterrupt(INT0);
     6f2:	80 e0       	ldi	r24, 0x00	; 0
     6f4:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <Interrupts_EnableExtInterrupt>
     6f8:	08 95       	ret

000006fa <Buttons_GetButtonState>:
}
uint8 Buttons_GetButtonState(void)
{
	return DIO_ReadPin(PORTD, 2);
     6fa:	62 e0       	ldi	r22, 0x02	; 2
     6fc:	83 e0       	ldi	r24, 0x03	; 3
     6fe:	0e 94 54 05 	call	0xaa8	; 0xaa8 <DIO_ReadPin>
     702:	08 95       	ret

00000704 <LED_InitLEDs>:
/************************************************************************/
/* Global Functions Definitions                                         */
/************************************************************************/
void LED_InitLEDs(void)
{
	DIO_InitPin(PORTA, 0, OUTPUT);
     704:	41 e0       	ldi	r20, 0x01	; 1
     706:	60 e0       	ldi	r22, 0x00	; 0
     708:	80 e0       	ldi	r24, 0x00	; 0
     70a:	0e 94 36 04 	call	0x86c	; 0x86c <DIO_InitPin>
	DIO_InitPin(PORTA, 1, OUTPUT);
     70e:	41 e0       	ldi	r20, 0x01	; 1
     710:	61 e0       	ldi	r22, 0x01	; 1
     712:	80 e0       	ldi	r24, 0x00	; 0
     714:	0e 94 36 04 	call	0x86c	; 0x86c <DIO_InitPin>
	DIO_InitPin(PORTA, 2, OUTPUT);
     718:	41 e0       	ldi	r20, 0x01	; 1
     71a:	62 e0       	ldi	r22, 0x02	; 2
     71c:	80 e0       	ldi	r24, 0x00	; 0
     71e:	0e 94 36 04 	call	0x86c	; 0x86c <DIO_InitPin>
	DIO_InitPin(PORTB, 0, OUTPUT);
     722:	41 e0       	ldi	r20, 0x01	; 1
     724:	60 e0       	ldi	r22, 0x00	; 0
     726:	81 e0       	ldi	r24, 0x01	; 1
     728:	0e 94 36 04 	call	0x86c	; 0x86c <DIO_InitPin>
	DIO_InitPin(PORTB, 1, OUTPUT);
     72c:	41 e0       	ldi	r20, 0x01	; 1
     72e:	61 e0       	ldi	r22, 0x01	; 1
     730:	81 e0       	ldi	r24, 0x01	; 1
     732:	0e 94 36 04 	call	0x86c	; 0x86c <DIO_InitPin>
	DIO_InitPin(PORTB, 2, OUTPUT);
     736:	41 e0       	ldi	r20, 0x01	; 1
     738:	62 e0       	ldi	r22, 0x02	; 2
     73a:	81 e0       	ldi	r24, 0x01	; 1
     73c:	0e 94 36 04 	call	0x86c	; 0x86c <DIO_InitPin>
     740:	08 95       	ret

00000742 <LED_TurnOnLED>:
}
void LED_TurnOnLED(uint8 LEDName)
{
	switch(LEDName)
     742:	82 30       	cpi	r24, 0x02	; 2
     744:	51 f1       	breq	.+84     	; 0x79a <LED_TurnOnLED+0x58>
     746:	28 f4       	brcc	.+10     	; 0x752 <LED_TurnOnLED+0x10>
     748:	88 23       	and	r24, r24
     74a:	d9 f0       	breq	.+54     	; 0x782 <LED_TurnOnLED+0x40>
     74c:	81 30       	cpi	r24, 0x01	; 1
     74e:	f9 f0       	breq	.+62     	; 0x78e <LED_TurnOnLED+0x4c>
     750:	08 95       	ret
     752:	84 30       	cpi	r24, 0x04	; 4
     754:	51 f0       	breq	.+20     	; 0x76a <LED_TurnOnLED+0x28>
     756:	18 f0       	brcs	.+6      	; 0x75e <LED_TurnOnLED+0x1c>
     758:	85 30       	cpi	r24, 0x05	; 5
     75a:	69 f0       	breq	.+26     	; 0x776 <LED_TurnOnLED+0x34>
     75c:	08 95       	ret
	{
		case PORTA0:
			DIO_WritePin(PORTA, 0, HIGH);
     75e:	41 e0       	ldi	r20, 0x01	; 1
     760:	60 e0       	ldi	r22, 0x00	; 0
     762:	80 e0       	ldi	r24, 0x00	; 0
     764:	0e 94 ab 04 	call	0x956	; 0x956 <DIO_WritePin>
			break;
     768:	08 95       	ret
		case PORTA1:
			DIO_WritePin(PORTA, 1, HIGH);
     76a:	41 e0       	ldi	r20, 0x01	; 1
     76c:	61 e0       	ldi	r22, 0x01	; 1
     76e:	80 e0       	ldi	r24, 0x00	; 0
     770:	0e 94 ab 04 	call	0x956	; 0x956 <DIO_WritePin>
			break;
     774:	08 95       	ret
		case PORTA2:
			DIO_WritePin(PORTA, 2, HIGH);
     776:	41 e0       	ldi	r20, 0x01	; 1
     778:	62 e0       	ldi	r22, 0x02	; 2
     77a:	80 e0       	ldi	r24, 0x00	; 0
     77c:	0e 94 ab 04 	call	0x956	; 0x956 <DIO_WritePin>
			break;
     780:	08 95       	ret
		case PORTB0:
			DIO_WritePin(PORTB, 0, HIGH);
     782:	41 e0       	ldi	r20, 0x01	; 1
     784:	60 e0       	ldi	r22, 0x00	; 0
     786:	81 e0       	ldi	r24, 0x01	; 1
     788:	0e 94 ab 04 	call	0x956	; 0x956 <DIO_WritePin>
			break;
     78c:	08 95       	ret
		case PORTB1:
			DIO_WritePin(PORTB, 1, HIGH);
     78e:	41 e0       	ldi	r20, 0x01	; 1
     790:	61 e0       	ldi	r22, 0x01	; 1
     792:	81 e0       	ldi	r24, 0x01	; 1
     794:	0e 94 ab 04 	call	0x956	; 0x956 <DIO_WritePin>
			break;
     798:	08 95       	ret
		case PORTB2:
			DIO_WritePin(PORTB, 2, HIGH);
     79a:	41 e0       	ldi	r20, 0x01	; 1
     79c:	62 e0       	ldi	r22, 0x02	; 2
     79e:	81 e0       	ldi	r24, 0x01	; 1
     7a0:	0e 94 ab 04 	call	0x956	; 0x956 <DIO_WritePin>
     7a4:	08 95       	ret

000007a6 <LED_TurnOffLED>:
			break;
	}	
}
void LED_TurnOffLED(uint8 LEDName)
{
	switch (LEDName)
     7a6:	82 30       	cpi	r24, 0x02	; 2
     7a8:	51 f1       	breq	.+84     	; 0x7fe <LED_TurnOffLED+0x58>
     7aa:	28 f4       	brcc	.+10     	; 0x7b6 <LED_TurnOffLED+0x10>
     7ac:	88 23       	and	r24, r24
     7ae:	d9 f0       	breq	.+54     	; 0x7e6 <LED_TurnOffLED+0x40>
     7b0:	81 30       	cpi	r24, 0x01	; 1
     7b2:	f9 f0       	breq	.+62     	; 0x7f2 <LED_TurnOffLED+0x4c>
     7b4:	08 95       	ret
     7b6:	84 30       	cpi	r24, 0x04	; 4
     7b8:	51 f0       	breq	.+20     	; 0x7ce <LED_TurnOffLED+0x28>
     7ba:	18 f0       	brcs	.+6      	; 0x7c2 <LED_TurnOffLED+0x1c>
     7bc:	85 30       	cpi	r24, 0x05	; 5
     7be:	69 f0       	breq	.+26     	; 0x7da <LED_TurnOffLED+0x34>
     7c0:	08 95       	ret
	{
		case PORTA0:
			DIO_WritePin(PORTA, 0, LOW);
     7c2:	40 e0       	ldi	r20, 0x00	; 0
     7c4:	60 e0       	ldi	r22, 0x00	; 0
     7c6:	80 e0       	ldi	r24, 0x00	; 0
     7c8:	0e 94 ab 04 	call	0x956	; 0x956 <DIO_WritePin>
			break;
     7cc:	08 95       	ret
		case PORTA1:
			DIO_WritePin(PORTA, 1, LOW);
     7ce:	40 e0       	ldi	r20, 0x00	; 0
     7d0:	61 e0       	ldi	r22, 0x01	; 1
     7d2:	80 e0       	ldi	r24, 0x00	; 0
     7d4:	0e 94 ab 04 	call	0x956	; 0x956 <DIO_WritePin>
			break;
     7d8:	08 95       	ret
		case PORTA2:
			DIO_WritePin(PORTA, 2, LOW);
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	62 e0       	ldi	r22, 0x02	; 2
     7de:	80 e0       	ldi	r24, 0x00	; 0
     7e0:	0e 94 ab 04 	call	0x956	; 0x956 <DIO_WritePin>
			break;
     7e4:	08 95       	ret
		case PORTB0:
			DIO_WritePin(PORTB, 0, LOW);
     7e6:	40 e0       	ldi	r20, 0x00	; 0
     7e8:	60 e0       	ldi	r22, 0x00	; 0
     7ea:	81 e0       	ldi	r24, 0x01	; 1
     7ec:	0e 94 ab 04 	call	0x956	; 0x956 <DIO_WritePin>
			break;
     7f0:	08 95       	ret
		case PORTB1:
			DIO_WritePin(PORTB, 1, LOW);
     7f2:	40 e0       	ldi	r20, 0x00	; 0
     7f4:	61 e0       	ldi	r22, 0x01	; 1
     7f6:	81 e0       	ldi	r24, 0x01	; 1
     7f8:	0e 94 ab 04 	call	0x956	; 0x956 <DIO_WritePin>
			break;
     7fc:	08 95       	ret
		case PORTB2:
			DIO_WritePin(PORTB, 2, LOW);
     7fe:	40 e0       	ldi	r20, 0x00	; 0
     800:	62 e0       	ldi	r22, 0x02	; 2
     802:	81 e0       	ldi	r24, 0x01	; 1
     804:	0e 94 ab 04 	call	0x956	; 0x956 <DIO_WritePin>
     808:	08 95       	ret

0000080a <LED_ToggleLED>:
			break;
	}
}
void LED_ToggleLED(uint8 LEDName)
{
	switch (LEDName)
     80a:	82 30       	cpi	r24, 0x02	; 2
     80c:	29 f1       	breq	.+74     	; 0x858 <LED_ToggleLED+0x4e>
     80e:	28 f4       	brcc	.+10     	; 0x81a <LED_ToggleLED+0x10>
     810:	88 23       	and	r24, r24
     812:	c1 f0       	breq	.+48     	; 0x844 <LED_ToggleLED+0x3a>
     814:	81 30       	cpi	r24, 0x01	; 1
     816:	d9 f0       	breq	.+54     	; 0x84e <LED_ToggleLED+0x44>
     818:	08 95       	ret
     81a:	84 30       	cpi	r24, 0x04	; 4
     81c:	49 f0       	breq	.+18     	; 0x830 <LED_ToggleLED+0x26>
     81e:	18 f0       	brcs	.+6      	; 0x826 <LED_ToggleLED+0x1c>
     820:	85 30       	cpi	r24, 0x05	; 5
     822:	59 f0       	breq	.+22     	; 0x83a <LED_ToggleLED+0x30>
     824:	08 95       	ret
	{
		case PORTA0:
			DIO_TogglePin(PORTA, 0);
     826:	60 e0       	ldi	r22, 0x00	; 0
     828:	80 e0       	ldi	r24, 0x00	; 0
     82a:	0e 94 20 05 	call	0xa40	; 0xa40 <DIO_TogglePin>
			break;
     82e:	08 95       	ret
		case PORTA1:
			DIO_TogglePin(PORTA, 1);
     830:	61 e0       	ldi	r22, 0x01	; 1
     832:	80 e0       	ldi	r24, 0x00	; 0
     834:	0e 94 20 05 	call	0xa40	; 0xa40 <DIO_TogglePin>
			break;
     838:	08 95       	ret
		case PORTA2:
			DIO_TogglePin(PORTA, 2);
     83a:	62 e0       	ldi	r22, 0x02	; 2
     83c:	80 e0       	ldi	r24, 0x00	; 0
     83e:	0e 94 20 05 	call	0xa40	; 0xa40 <DIO_TogglePin>
			break;
     842:	08 95       	ret
		case PORTB0:
			DIO_TogglePin(PORTB, 0);
     844:	60 e0       	ldi	r22, 0x00	; 0
     846:	81 e0       	ldi	r24, 0x01	; 1
     848:	0e 94 20 05 	call	0xa40	; 0xa40 <DIO_TogglePin>
			break;
     84c:	08 95       	ret
		case PORTB1:
			DIO_TogglePin(PORTB, 1);
     84e:	61 e0       	ldi	r22, 0x01	; 1
     850:	81 e0       	ldi	r24, 0x01	; 1
     852:	0e 94 20 05 	call	0xa40	; 0xa40 <DIO_TogglePin>
			break;
     856:	08 95       	ret
		case PORTB2:
			DIO_TogglePin(PORTB, 2);
     858:	62 e0       	ldi	r22, 0x02	; 2
     85a:	81 e0       	ldi	r24, 0x01	; 1
     85c:	0e 94 20 05 	call	0xa40	; 0xa40 <DIO_TogglePin>
     860:	08 95       	ret

00000862 <main>:
/************************************************************************/
/* Function Definitions								                    */
/************************************************************************/
int main(void)
{
    AppInit();
     862:	0e 94 cd 00 	call	0x19a	; 0x19a <AppInit>
	while (1) 
    {
		AppRun();
     866:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <AppRun>
     86a:	fd cf       	rjmp	.-6      	; 0x866 <main+0x4>

0000086c <DIO_InitPin>:
/************************************************************************/
/* Functions Definitions                                                */
/************************************************************************/
void  DIO_InitPin(uint8 PortName, uint8 PinNumber, uint8 Direction)
{
	switch (PortName)
     86c:	81 30       	cpi	r24, 0x01	; 1
     86e:	11 f1       	breq	.+68     	; 0x8b4 <DIO_InitPin+0x48>
     870:	30 f0       	brcs	.+12     	; 0x87e <DIO_InitPin+0x12>
     872:	82 30       	cpi	r24, 0x02	; 2
     874:	d1 f1       	breq	.+116    	; 0x8ea <DIO_InitPin+0x7e>
     876:	83 30       	cpi	r24, 0x03	; 3
     878:	09 f4       	brne	.+2      	; 0x87c <DIO_InitPin+0x10>
     87a:	52 c0       	rjmp	.+164    	; 0x920 <DIO_InitPin+0xb4>
     87c:	08 95       	ret
	{
	case PORTA:
		 if (Direction == OUTPUT)
     87e:	41 30       	cpi	r20, 0x01	; 1
     880:	59 f4       	brne	.+22     	; 0x898 <DIO_InitPin+0x2c>
		 {
			SET_BIT(REG_DDRA, PinNumber);
     882:	2a b3       	in	r18, 0x1a	; 26
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	02 c0       	rjmp	.+4      	; 0x88e <DIO_InitPin+0x22>
     88a:	88 0f       	add	r24, r24
     88c:	99 1f       	adc	r25, r25
     88e:	6a 95       	dec	r22
     890:	e2 f7       	brpl	.-8      	; 0x88a <DIO_InitPin+0x1e>
     892:	82 2b       	or	r24, r18
     894:	8a bb       	out	0x1a, r24	; 26
     896:	08 95       	ret
		 }
		 else if (Direction == INPUT)
     898:	41 11       	cpse	r20, r1
     89a:	5c c0       	rjmp	.+184    	; 0x954 <DIO_InitPin+0xe8>
		 {
			CLEAR_BIT(REG_DDRA, PinNumber);
     89c:	2a b3       	in	r18, 0x1a	; 26
     89e:	81 e0       	ldi	r24, 0x01	; 1
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	02 c0       	rjmp	.+4      	; 0x8a8 <DIO_InitPin+0x3c>
     8a4:	88 0f       	add	r24, r24
     8a6:	99 1f       	adc	r25, r25
     8a8:	6a 95       	dec	r22
     8aa:	e2 f7       	brpl	.-8      	; 0x8a4 <DIO_InitPin+0x38>
     8ac:	80 95       	com	r24
     8ae:	82 23       	and	r24, r18
     8b0:	8a bb       	out	0x1a, r24	; 26
     8b2:	08 95       	ret
		 }
		break;
	case PORTB:
		if (Direction == OUTPUT)
     8b4:	41 30       	cpi	r20, 0x01	; 1
     8b6:	59 f4       	brne	.+22     	; 0x8ce <DIO_InitPin+0x62>
		{
			SET_BIT(REG_DDRB, PinNumber);
     8b8:	27 b3       	in	r18, 0x17	; 23
     8ba:	81 e0       	ldi	r24, 0x01	; 1
     8bc:	90 e0       	ldi	r25, 0x00	; 0
     8be:	02 c0       	rjmp	.+4      	; 0x8c4 <DIO_InitPin+0x58>
     8c0:	88 0f       	add	r24, r24
     8c2:	99 1f       	adc	r25, r25
     8c4:	6a 95       	dec	r22
     8c6:	e2 f7       	brpl	.-8      	; 0x8c0 <DIO_InitPin+0x54>
     8c8:	82 2b       	or	r24, r18
     8ca:	87 bb       	out	0x17, r24	; 23
     8cc:	08 95       	ret
		}
		else if (Direction == INPUT)
     8ce:	41 11       	cpse	r20, r1
     8d0:	41 c0       	rjmp	.+130    	; 0x954 <DIO_InitPin+0xe8>
		{
			CLEAR_BIT(REG_DDRB, PinNumber);
     8d2:	27 b3       	in	r18, 0x17	; 23
     8d4:	81 e0       	ldi	r24, 0x01	; 1
     8d6:	90 e0       	ldi	r25, 0x00	; 0
     8d8:	02 c0       	rjmp	.+4      	; 0x8de <DIO_InitPin+0x72>
     8da:	88 0f       	add	r24, r24
     8dc:	99 1f       	adc	r25, r25
     8de:	6a 95       	dec	r22
     8e0:	e2 f7       	brpl	.-8      	; 0x8da <DIO_InitPin+0x6e>
     8e2:	80 95       	com	r24
     8e4:	82 23       	and	r24, r18
     8e6:	87 bb       	out	0x17, r24	; 23
     8e8:	08 95       	ret
		}
		break;
	case PORTC:
		if (Direction == OUTPUT)
     8ea:	41 30       	cpi	r20, 0x01	; 1
     8ec:	59 f4       	brne	.+22     	; 0x904 <DIO_InitPin+0x98>
		{
			SET_BIT(REG_DDRC, PinNumber);
     8ee:	24 b3       	in	r18, 0x14	; 20
     8f0:	81 e0       	ldi	r24, 0x01	; 1
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	02 c0       	rjmp	.+4      	; 0x8fa <DIO_InitPin+0x8e>
     8f6:	88 0f       	add	r24, r24
     8f8:	99 1f       	adc	r25, r25
     8fa:	6a 95       	dec	r22
     8fc:	e2 f7       	brpl	.-8      	; 0x8f6 <DIO_InitPin+0x8a>
     8fe:	82 2b       	or	r24, r18
     900:	84 bb       	out	0x14, r24	; 20
     902:	08 95       	ret
		}
		else if (Direction == INPUT)
     904:	41 11       	cpse	r20, r1
     906:	26 c0       	rjmp	.+76     	; 0x954 <DIO_InitPin+0xe8>
		{
			CLEAR_BIT(REG_DDRC, PinNumber);
     908:	24 b3       	in	r18, 0x14	; 20
     90a:	81 e0       	ldi	r24, 0x01	; 1
     90c:	90 e0       	ldi	r25, 0x00	; 0
     90e:	02 c0       	rjmp	.+4      	; 0x914 <DIO_InitPin+0xa8>
     910:	88 0f       	add	r24, r24
     912:	99 1f       	adc	r25, r25
     914:	6a 95       	dec	r22
     916:	e2 f7       	brpl	.-8      	; 0x910 <DIO_InitPin+0xa4>
     918:	80 95       	com	r24
     91a:	82 23       	and	r24, r18
     91c:	84 bb       	out	0x14, r24	; 20
     91e:	08 95       	ret
		}
		break;
	case PORTD:
		if (Direction == OUTPUT)
     920:	41 30       	cpi	r20, 0x01	; 1
     922:	59 f4       	brne	.+22     	; 0x93a <DIO_InitPin+0xce>
		{
			SET_BIT(REG_DDRD, PinNumber);
     924:	21 b3       	in	r18, 0x11	; 17
     926:	81 e0       	ldi	r24, 0x01	; 1
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	02 c0       	rjmp	.+4      	; 0x930 <DIO_InitPin+0xc4>
     92c:	88 0f       	add	r24, r24
     92e:	99 1f       	adc	r25, r25
     930:	6a 95       	dec	r22
     932:	e2 f7       	brpl	.-8      	; 0x92c <DIO_InitPin+0xc0>
     934:	82 2b       	or	r24, r18
     936:	81 bb       	out	0x11, r24	; 17
     938:	08 95       	ret
		}
		else if (Direction == INPUT)
     93a:	41 11       	cpse	r20, r1
     93c:	0b c0       	rjmp	.+22     	; 0x954 <DIO_InitPin+0xe8>
		{
			CLEAR_BIT(REG_DDRD, PinNumber);
     93e:	21 b3       	in	r18, 0x11	; 17
     940:	81 e0       	ldi	r24, 0x01	; 1
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	02 c0       	rjmp	.+4      	; 0x94a <DIO_InitPin+0xde>
     946:	88 0f       	add	r24, r24
     948:	99 1f       	adc	r25, r25
     94a:	6a 95       	dec	r22
     94c:	e2 f7       	brpl	.-8      	; 0x946 <DIO_InitPin+0xda>
     94e:	80 95       	com	r24
     950:	82 23       	and	r24, r18
     952:	81 bb       	out	0x11, r24	; 17
     954:	08 95       	ret

00000956 <DIO_WritePin>:
		break;
	}
}
void  DIO_WritePin(uint8 PortName, uint8 PinNumber, uint8 Value)
{
	switch (PortName)
     956:	81 30       	cpi	r24, 0x01	; 1
     958:	11 f1       	breq	.+68     	; 0x99e <DIO_WritePin+0x48>
     95a:	30 f0       	brcs	.+12     	; 0x968 <DIO_WritePin+0x12>
     95c:	82 30       	cpi	r24, 0x02	; 2
     95e:	d1 f1       	breq	.+116    	; 0x9d4 <DIO_WritePin+0x7e>
     960:	83 30       	cpi	r24, 0x03	; 3
     962:	09 f4       	brne	.+2      	; 0x966 <DIO_WritePin+0x10>
     964:	52 c0       	rjmp	.+164    	; 0xa0a <DIO_WritePin+0xb4>
     966:	08 95       	ret
	{
	case PORTA:
		if (Value == HIGH)
     968:	41 30       	cpi	r20, 0x01	; 1
     96a:	59 f4       	brne	.+22     	; 0x982 <DIO_WritePin+0x2c>
		{
			SET_BIT(REG_PORTA, PinNumber);
     96c:	2b b3       	in	r18, 0x1b	; 27
     96e:	81 e0       	ldi	r24, 0x01	; 1
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	02 c0       	rjmp	.+4      	; 0x978 <DIO_WritePin+0x22>
     974:	88 0f       	add	r24, r24
     976:	99 1f       	adc	r25, r25
     978:	6a 95       	dec	r22
     97a:	e2 f7       	brpl	.-8      	; 0x974 <DIO_WritePin+0x1e>
     97c:	82 2b       	or	r24, r18
     97e:	8b bb       	out	0x1b, r24	; 27
     980:	08 95       	ret
		}
		else if (Value == LOW)
     982:	41 11       	cpse	r20, r1
     984:	5c c0       	rjmp	.+184    	; 0xa3e <DIO_WritePin+0xe8>
		{
			CLEAR_BIT(REG_PORTA, PinNumber);
     986:	2b b3       	in	r18, 0x1b	; 27
     988:	81 e0       	ldi	r24, 0x01	; 1
     98a:	90 e0       	ldi	r25, 0x00	; 0
     98c:	02 c0       	rjmp	.+4      	; 0x992 <DIO_WritePin+0x3c>
     98e:	88 0f       	add	r24, r24
     990:	99 1f       	adc	r25, r25
     992:	6a 95       	dec	r22
     994:	e2 f7       	brpl	.-8      	; 0x98e <DIO_WritePin+0x38>
     996:	80 95       	com	r24
     998:	82 23       	and	r24, r18
     99a:	8b bb       	out	0x1b, r24	; 27
     99c:	08 95       	ret
		}
		break;
	case PORTB:
		if (Value == HIGH)
     99e:	41 30       	cpi	r20, 0x01	; 1
     9a0:	59 f4       	brne	.+22     	; 0x9b8 <DIO_WritePin+0x62>
		{
			SET_BIT(REG_PORTB, PinNumber);
     9a2:	28 b3       	in	r18, 0x18	; 24
     9a4:	81 e0       	ldi	r24, 0x01	; 1
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	02 c0       	rjmp	.+4      	; 0x9ae <DIO_WritePin+0x58>
     9aa:	88 0f       	add	r24, r24
     9ac:	99 1f       	adc	r25, r25
     9ae:	6a 95       	dec	r22
     9b0:	e2 f7       	brpl	.-8      	; 0x9aa <DIO_WritePin+0x54>
     9b2:	82 2b       	or	r24, r18
     9b4:	88 bb       	out	0x18, r24	; 24
     9b6:	08 95       	ret
		}
		else if (Value == LOW)
     9b8:	41 11       	cpse	r20, r1
     9ba:	41 c0       	rjmp	.+130    	; 0xa3e <DIO_WritePin+0xe8>
		{
			CLEAR_BIT(REG_PORTB, PinNumber);
     9bc:	28 b3       	in	r18, 0x18	; 24
     9be:	81 e0       	ldi	r24, 0x01	; 1
     9c0:	90 e0       	ldi	r25, 0x00	; 0
     9c2:	02 c0       	rjmp	.+4      	; 0x9c8 <DIO_WritePin+0x72>
     9c4:	88 0f       	add	r24, r24
     9c6:	99 1f       	adc	r25, r25
     9c8:	6a 95       	dec	r22
     9ca:	e2 f7       	brpl	.-8      	; 0x9c4 <DIO_WritePin+0x6e>
     9cc:	80 95       	com	r24
     9ce:	82 23       	and	r24, r18
     9d0:	88 bb       	out	0x18, r24	; 24
     9d2:	08 95       	ret
		}
		break;
	case PORTC:
		if (Value == HIGH)
     9d4:	41 30       	cpi	r20, 0x01	; 1
     9d6:	59 f4       	brne	.+22     	; 0x9ee <DIO_WritePin+0x98>
		{
			SET_BIT(REG_PORTC, PinNumber);
     9d8:	25 b3       	in	r18, 0x15	; 21
     9da:	81 e0       	ldi	r24, 0x01	; 1
     9dc:	90 e0       	ldi	r25, 0x00	; 0
     9de:	02 c0       	rjmp	.+4      	; 0x9e4 <DIO_WritePin+0x8e>
     9e0:	88 0f       	add	r24, r24
     9e2:	99 1f       	adc	r25, r25
     9e4:	6a 95       	dec	r22
     9e6:	e2 f7       	brpl	.-8      	; 0x9e0 <DIO_WritePin+0x8a>
     9e8:	82 2b       	or	r24, r18
     9ea:	85 bb       	out	0x15, r24	; 21
     9ec:	08 95       	ret
		}
		else if (Value == LOW)
     9ee:	41 11       	cpse	r20, r1
     9f0:	26 c0       	rjmp	.+76     	; 0xa3e <DIO_WritePin+0xe8>
		{
			CLEAR_BIT(REG_PORTC, PinNumber);
     9f2:	25 b3       	in	r18, 0x15	; 21
     9f4:	81 e0       	ldi	r24, 0x01	; 1
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	02 c0       	rjmp	.+4      	; 0x9fe <DIO_WritePin+0xa8>
     9fa:	88 0f       	add	r24, r24
     9fc:	99 1f       	adc	r25, r25
     9fe:	6a 95       	dec	r22
     a00:	e2 f7       	brpl	.-8      	; 0x9fa <DIO_WritePin+0xa4>
     a02:	80 95       	com	r24
     a04:	82 23       	and	r24, r18
     a06:	85 bb       	out	0x15, r24	; 21
     a08:	08 95       	ret
		}
		break;
	case PORTD:
		if (Value == HIGH)
     a0a:	41 30       	cpi	r20, 0x01	; 1
     a0c:	59 f4       	brne	.+22     	; 0xa24 <DIO_WritePin+0xce>
		{
			SET_BIT(REG_PORTD, PinNumber);
     a0e:	22 b3       	in	r18, 0x12	; 18
     a10:	81 e0       	ldi	r24, 0x01	; 1
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	02 c0       	rjmp	.+4      	; 0xa1a <DIO_WritePin+0xc4>
     a16:	88 0f       	add	r24, r24
     a18:	99 1f       	adc	r25, r25
     a1a:	6a 95       	dec	r22
     a1c:	e2 f7       	brpl	.-8      	; 0xa16 <DIO_WritePin+0xc0>
     a1e:	82 2b       	or	r24, r18
     a20:	82 bb       	out	0x12, r24	; 18
     a22:	08 95       	ret
		}
		else if (Value == LOW)
     a24:	41 11       	cpse	r20, r1
     a26:	0b c0       	rjmp	.+22     	; 0xa3e <DIO_WritePin+0xe8>
		{
			CLEAR_BIT(REG_PORTD, PinNumber);
     a28:	22 b3       	in	r18, 0x12	; 18
     a2a:	81 e0       	ldi	r24, 0x01	; 1
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	02 c0       	rjmp	.+4      	; 0xa34 <DIO_WritePin+0xde>
     a30:	88 0f       	add	r24, r24
     a32:	99 1f       	adc	r25, r25
     a34:	6a 95       	dec	r22
     a36:	e2 f7       	brpl	.-8      	; 0xa30 <DIO_WritePin+0xda>
     a38:	80 95       	com	r24
     a3a:	82 23       	and	r24, r18
     a3c:	82 bb       	out	0x12, r24	; 18
     a3e:	08 95       	ret

00000a40 <DIO_TogglePin>:
		break;
	}	
}
void  DIO_TogglePin(uint8 PortName, uint8 PinNumber)
{
	switch (PortName)
     a40:	81 30       	cpi	r24, 0x01	; 1
     a42:	89 f0       	breq	.+34     	; 0xa66 <DIO_TogglePin+0x26>
     a44:	28 f0       	brcs	.+10     	; 0xa50 <DIO_TogglePin+0x10>
     a46:	82 30       	cpi	r24, 0x02	; 2
     a48:	c9 f0       	breq	.+50     	; 0xa7c <DIO_TogglePin+0x3c>
     a4a:	83 30       	cpi	r24, 0x03	; 3
     a4c:	11 f1       	breq	.+68     	; 0xa92 <DIO_TogglePin+0x52>
     a4e:	08 95       	ret
	{
		case PORTA:
			TOGGLE_BIT(REG_PORTA, PinNumber);
     a50:	2b b3       	in	r18, 0x1b	; 27
     a52:	81 e0       	ldi	r24, 0x01	; 1
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	02 c0       	rjmp	.+4      	; 0xa5c <DIO_TogglePin+0x1c>
     a58:	88 0f       	add	r24, r24
     a5a:	99 1f       	adc	r25, r25
     a5c:	6a 95       	dec	r22
     a5e:	e2 f7       	brpl	.-8      	; 0xa58 <DIO_TogglePin+0x18>
     a60:	82 27       	eor	r24, r18
     a62:	8b bb       	out	0x1b, r24	; 27
			break;
     a64:	08 95       	ret
		case PORTB:
			TOGGLE_BIT(REG_PORTB, PinNumber);
     a66:	28 b3       	in	r18, 0x18	; 24
     a68:	81 e0       	ldi	r24, 0x01	; 1
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	02 c0       	rjmp	.+4      	; 0xa72 <DIO_TogglePin+0x32>
     a6e:	88 0f       	add	r24, r24
     a70:	99 1f       	adc	r25, r25
     a72:	6a 95       	dec	r22
     a74:	e2 f7       	brpl	.-8      	; 0xa6e <DIO_TogglePin+0x2e>
     a76:	82 27       	eor	r24, r18
     a78:	88 bb       	out	0x18, r24	; 24
			break;
     a7a:	08 95       	ret
		case PORTC:
			TOGGLE_BIT(REG_PORTC, PinNumber);
     a7c:	25 b3       	in	r18, 0x15	; 21
     a7e:	81 e0       	ldi	r24, 0x01	; 1
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	02 c0       	rjmp	.+4      	; 0xa88 <DIO_TogglePin+0x48>
     a84:	88 0f       	add	r24, r24
     a86:	99 1f       	adc	r25, r25
     a88:	6a 95       	dec	r22
     a8a:	e2 f7       	brpl	.-8      	; 0xa84 <DIO_TogglePin+0x44>
     a8c:	82 27       	eor	r24, r18
     a8e:	85 bb       	out	0x15, r24	; 21
			break;
     a90:	08 95       	ret
		case PORTD:
			TOGGLE_BIT(REG_PORTD, PinNumber);
     a92:	22 b3       	in	r18, 0x12	; 18
     a94:	81 e0       	ldi	r24, 0x01	; 1
     a96:	90 e0       	ldi	r25, 0x00	; 0
     a98:	02 c0       	rjmp	.+4      	; 0xa9e <DIO_TogglePin+0x5e>
     a9a:	88 0f       	add	r24, r24
     a9c:	99 1f       	adc	r25, r25
     a9e:	6a 95       	dec	r22
     aa0:	e2 f7       	brpl	.-8      	; 0xa9a <DIO_TogglePin+0x5a>
     aa2:	82 27       	eor	r24, r18
     aa4:	82 bb       	out	0x12, r24	; 18
     aa6:	08 95       	ret

00000aa8 <DIO_ReadPin>:
			break;
	}
}
uint8 DIO_ReadPin(uint8 PortName, uint8 PinNumber)
{
     aa8:	26 2f       	mov	r18, r22
	uint8 reading = -1;
	switch (PortName)
     aaa:	81 30       	cpi	r24, 0x01	; 1
     aac:	39 f1       	breq	.+78     	; 0xafc <DIO_ReadPin+0x54>
     aae:	38 f0       	brcs	.+14     	; 0xabe <DIO_ReadPin+0x16>
     ab0:	82 30       	cpi	r24, 0x02	; 2
     ab2:	09 f4       	brne	.+2      	; 0xab6 <DIO_ReadPin+0xe>
     ab4:	42 c0       	rjmp	.+132    	; 0xb3a <DIO_ReadPin+0x92>
     ab6:	83 30       	cpi	r24, 0x03	; 3
     ab8:	09 f4       	brne	.+2      	; 0xabc <DIO_ReadPin+0x14>
     aba:	5e c0       	rjmp	.+188    	; 0xb78 <DIO_ReadPin+0xd0>
     abc:	7c c0       	rjmp	.+248    	; 0xbb6 <DIO_ReadPin+0x10e>
	{
	case PORTA:
		reading = CHECK_BIT(REG_PINA, PinNumber);
     abe:	39 b3       	in	r19, 0x19	; 25
     ac0:	81 e0       	ldi	r24, 0x01	; 1
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	a0 e0       	ldi	r26, 0x00	; 0
     ac6:	b0 e0       	ldi	r27, 0x00	; 0
     ac8:	ac 01       	movw	r20, r24
     aca:	bd 01       	movw	r22, r26
     acc:	02 2e       	mov	r0, r18
     ace:	04 c0       	rjmp	.+8      	; 0xad8 <DIO_ReadPin+0x30>
     ad0:	44 0f       	add	r20, r20
     ad2:	55 1f       	adc	r21, r21
     ad4:	66 1f       	adc	r22, r22
     ad6:	77 1f       	adc	r23, r23
     ad8:	0a 94       	dec	r0
     ada:	d2 f7       	brpl	.-12     	; 0xad0 <DIO_ReadPin+0x28>
     adc:	83 2f       	mov	r24, r19
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	a0 e0       	ldi	r26, 0x00	; 0
     ae2:	b0 e0       	ldi	r27, 0x00	; 0
     ae4:	84 23       	and	r24, r20
     ae6:	95 23       	and	r25, r21
     ae8:	a6 23       	and	r26, r22
     aea:	b7 23       	and	r27, r23
     aec:	04 c0       	rjmp	.+8      	; 0xaf6 <DIO_ReadPin+0x4e>
     aee:	b6 95       	lsr	r27
     af0:	a7 95       	ror	r26
     af2:	97 95       	ror	r25
     af4:	87 95       	ror	r24
     af6:	2a 95       	dec	r18
     af8:	d2 f7       	brpl	.-12     	; 0xaee <DIO_ReadPin+0x46>
		break;
     afa:	08 95       	ret
	case PORTB:
		reading = CHECK_BIT(REG_PINB, PinNumber);
     afc:	36 b3       	in	r19, 0x16	; 22
     afe:	81 e0       	ldi	r24, 0x01	; 1
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e0       	ldi	r26, 0x00	; 0
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	ac 01       	movw	r20, r24
     b08:	bd 01       	movw	r22, r26
     b0a:	02 2e       	mov	r0, r18
     b0c:	04 c0       	rjmp	.+8      	; 0xb16 <DIO_ReadPin+0x6e>
     b0e:	44 0f       	add	r20, r20
     b10:	55 1f       	adc	r21, r21
     b12:	66 1f       	adc	r22, r22
     b14:	77 1f       	adc	r23, r23
     b16:	0a 94       	dec	r0
     b18:	d2 f7       	brpl	.-12     	; 0xb0e <DIO_ReadPin+0x66>
     b1a:	83 2f       	mov	r24, r19
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	a0 e0       	ldi	r26, 0x00	; 0
     b20:	b0 e0       	ldi	r27, 0x00	; 0
     b22:	84 23       	and	r24, r20
     b24:	95 23       	and	r25, r21
     b26:	a6 23       	and	r26, r22
     b28:	b7 23       	and	r27, r23
     b2a:	04 c0       	rjmp	.+8      	; 0xb34 <DIO_ReadPin+0x8c>
     b2c:	b6 95       	lsr	r27
     b2e:	a7 95       	ror	r26
     b30:	97 95       	ror	r25
     b32:	87 95       	ror	r24
     b34:	2a 95       	dec	r18
     b36:	d2 f7       	brpl	.-12     	; 0xb2c <DIO_ReadPin+0x84>
		break;
     b38:	08 95       	ret
	case PORTC:
		reading = CHECK_BIT(REG_PINC, PinNumber);
     b3a:	33 b3       	in	r19, 0x13	; 19
     b3c:	81 e0       	ldi	r24, 0x01	; 1
     b3e:	90 e0       	ldi	r25, 0x00	; 0
     b40:	a0 e0       	ldi	r26, 0x00	; 0
     b42:	b0 e0       	ldi	r27, 0x00	; 0
     b44:	ac 01       	movw	r20, r24
     b46:	bd 01       	movw	r22, r26
     b48:	02 2e       	mov	r0, r18
     b4a:	04 c0       	rjmp	.+8      	; 0xb54 <DIO_ReadPin+0xac>
     b4c:	44 0f       	add	r20, r20
     b4e:	55 1f       	adc	r21, r21
     b50:	66 1f       	adc	r22, r22
     b52:	77 1f       	adc	r23, r23
     b54:	0a 94       	dec	r0
     b56:	d2 f7       	brpl	.-12     	; 0xb4c <DIO_ReadPin+0xa4>
     b58:	83 2f       	mov	r24, r19
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	a0 e0       	ldi	r26, 0x00	; 0
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	84 23       	and	r24, r20
     b62:	95 23       	and	r25, r21
     b64:	a6 23       	and	r26, r22
     b66:	b7 23       	and	r27, r23
     b68:	04 c0       	rjmp	.+8      	; 0xb72 <DIO_ReadPin+0xca>
     b6a:	b6 95       	lsr	r27
     b6c:	a7 95       	ror	r26
     b6e:	97 95       	ror	r25
     b70:	87 95       	ror	r24
     b72:	2a 95       	dec	r18
     b74:	d2 f7       	brpl	.-12     	; 0xb6a <DIO_ReadPin+0xc2>
		break;
     b76:	08 95       	ret
	case PORTD:
		reading = CHECK_BIT(REG_PIND, PinNumber);
     b78:	30 b3       	in	r19, 0x10	; 16
     b7a:	81 e0       	ldi	r24, 0x01	; 1
     b7c:	90 e0       	ldi	r25, 0x00	; 0
     b7e:	a0 e0       	ldi	r26, 0x00	; 0
     b80:	b0 e0       	ldi	r27, 0x00	; 0
     b82:	ac 01       	movw	r20, r24
     b84:	bd 01       	movw	r22, r26
     b86:	02 2e       	mov	r0, r18
     b88:	04 c0       	rjmp	.+8      	; 0xb92 <DIO_ReadPin+0xea>
     b8a:	44 0f       	add	r20, r20
     b8c:	55 1f       	adc	r21, r21
     b8e:	66 1f       	adc	r22, r22
     b90:	77 1f       	adc	r23, r23
     b92:	0a 94       	dec	r0
     b94:	d2 f7       	brpl	.-12     	; 0xb8a <DIO_ReadPin+0xe2>
     b96:	83 2f       	mov	r24, r19
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	a0 e0       	ldi	r26, 0x00	; 0
     b9c:	b0 e0       	ldi	r27, 0x00	; 0
     b9e:	84 23       	and	r24, r20
     ba0:	95 23       	and	r25, r21
     ba2:	a6 23       	and	r26, r22
     ba4:	b7 23       	and	r27, r23
     ba6:	04 c0       	rjmp	.+8      	; 0xbb0 <DIO_ReadPin+0x108>
     ba8:	b6 95       	lsr	r27
     baa:	a7 95       	ror	r26
     bac:	97 95       	ror	r25
     bae:	87 95       	ror	r24
     bb0:	2a 95       	dec	r18
     bb2:	d2 f7       	brpl	.-12     	; 0xba8 <DIO_ReadPin+0x100>
		break;
     bb4:	08 95       	ret
			break;
	}
}
uint8 DIO_ReadPin(uint8 PortName, uint8 PinNumber)
{
	uint8 reading = -1;
     bb6:	8f ef       	ldi	r24, 0xFF	; 255
	case PORTD:
		reading = CHECK_BIT(REG_PIND, PinNumber);
		break;
	}	
	return reading;
     bb8:	08 95       	ret

00000bba <Interrupts_EnableGlobalInterrupts>:
}
void Interrupts_RegisterCallbackExtInt2(void (*Callback)(void))
{
	if(Callback != NULL)
	{
		ExtInterrupt2CallBackPtr = Callback;
     bba:	8f b7       	in	r24, 0x3f	; 63
     bbc:	80 68       	ori	r24, 0x80	; 128
     bbe:	8f bf       	out	0x3f, r24	; 63
     bc0:	08 95       	ret

00000bc2 <Interrupts_EnableExtInterrupt>:
     bc2:	81 30       	cpi	r24, 0x01	; 1
     bc4:	41 f0       	breq	.+16     	; 0xbd6 <Interrupts_EnableExtInterrupt+0x14>
     bc6:	18 f0       	brcs	.+6      	; 0xbce <Interrupts_EnableExtInterrupt+0xc>
     bc8:	82 30       	cpi	r24, 0x02	; 2
     bca:	49 f0       	breq	.+18     	; 0xbde <Interrupts_EnableExtInterrupt+0x1c>
     bcc:	08 95       	ret
     bce:	8b b7       	in	r24, 0x3b	; 59
     bd0:	80 64       	ori	r24, 0x40	; 64
     bd2:	8b bf       	out	0x3b, r24	; 59
     bd4:	08 95       	ret
     bd6:	8b b7       	in	r24, 0x3b	; 59
     bd8:	80 68       	ori	r24, 0x80	; 128
     bda:	8b bf       	out	0x3b, r24	; 59
     bdc:	08 95       	ret
     bde:	8b b7       	in	r24, 0x3b	; 59
     be0:	80 62       	ori	r24, 0x20	; 32
     be2:	8b bf       	out	0x3b, r24	; 59
     be4:	08 95       	ret

00000be6 <Interrupts_ConfigExtInterrupt>:
     be6:	81 30       	cpi	r24, 0x01	; 1
     be8:	49 f1       	breq	.+82     	; 0xc3c <Interrupts_ConfigExtInterrupt+0x56>
     bea:	20 f0       	brcs	.+8      	; 0xbf4 <Interrupts_ConfigExtInterrupt+0xe>
     bec:	82 30       	cpi	r24, 0x02	; 2
     bee:	09 f4       	brne	.+2      	; 0xbf2 <Interrupts_ConfigExtInterrupt+0xc>
     bf0:	49 c0       	rjmp	.+146    	; 0xc84 <Interrupts_ConfigExtInterrupt+0x9e>
     bf2:	08 95       	ret
     bf4:	61 30       	cpi	r22, 0x01	; 1
     bf6:	39 f4       	brne	.+14     	; 0xc06 <Interrupts_ConfigExtInterrupt+0x20>
     bf8:	85 b7       	in	r24, 0x35	; 53
     bfa:	81 60       	ori	r24, 0x01	; 1
     bfc:	85 bf       	out	0x35, r24	; 53
     bfe:	85 b7       	in	r24, 0x35	; 53
     c00:	82 60       	ori	r24, 0x02	; 2
     c02:	85 bf       	out	0x35, r24	; 53
     c04:	08 95       	ret
     c06:	61 11       	cpse	r22, r1
     c08:	07 c0       	rjmp	.+14     	; 0xc18 <Interrupts_ConfigExtInterrupt+0x32>
     c0a:	85 b7       	in	r24, 0x35	; 53
     c0c:	8e 7f       	andi	r24, 0xFE	; 254
     c0e:	85 bf       	out	0x35, r24	; 53
     c10:	85 b7       	in	r24, 0x35	; 53
     c12:	82 60       	ori	r24, 0x02	; 2
     c14:	85 bf       	out	0x35, r24	; 53
     c16:	08 95       	ret
     c18:	62 30       	cpi	r22, 0x02	; 2
     c1a:	39 f4       	brne	.+14     	; 0xc2a <Interrupts_ConfigExtInterrupt+0x44>
     c1c:	85 b7       	in	r24, 0x35	; 53
     c1e:	81 60       	ori	r24, 0x01	; 1
     c20:	85 bf       	out	0x35, r24	; 53
     c22:	85 b7       	in	r24, 0x35	; 53
     c24:	8d 7f       	andi	r24, 0xFD	; 253
     c26:	85 bf       	out	0x35, r24	; 53
     c28:	08 95       	ret
     c2a:	63 30       	cpi	r22, 0x03	; 3
     c2c:	b1 f5       	brne	.+108    	; 0xc9a <Interrupts_ConfigExtInterrupt+0xb4>
     c2e:	85 b7       	in	r24, 0x35	; 53
     c30:	8e 7f       	andi	r24, 0xFE	; 254
     c32:	85 bf       	out	0x35, r24	; 53
     c34:	85 b7       	in	r24, 0x35	; 53
     c36:	8d 7f       	andi	r24, 0xFD	; 253
     c38:	85 bf       	out	0x35, r24	; 53
     c3a:	08 95       	ret
     c3c:	61 30       	cpi	r22, 0x01	; 1
     c3e:	39 f4       	brne	.+14     	; 0xc4e <Interrupts_ConfigExtInterrupt+0x68>
     c40:	85 b7       	in	r24, 0x35	; 53
     c42:	84 60       	ori	r24, 0x04	; 4
     c44:	85 bf       	out	0x35, r24	; 53
     c46:	85 b7       	in	r24, 0x35	; 53
     c48:	88 60       	ori	r24, 0x08	; 8
     c4a:	85 bf       	out	0x35, r24	; 53
     c4c:	08 95       	ret
     c4e:	61 11       	cpse	r22, r1
     c50:	07 c0       	rjmp	.+14     	; 0xc60 <Interrupts_ConfigExtInterrupt+0x7a>
     c52:	85 b7       	in	r24, 0x35	; 53
     c54:	8b 7f       	andi	r24, 0xFB	; 251
     c56:	85 bf       	out	0x35, r24	; 53
     c58:	85 b7       	in	r24, 0x35	; 53
     c5a:	88 60       	ori	r24, 0x08	; 8
     c5c:	85 bf       	out	0x35, r24	; 53
     c5e:	08 95       	ret
     c60:	62 30       	cpi	r22, 0x02	; 2
     c62:	39 f4       	brne	.+14     	; 0xc72 <Interrupts_ConfigExtInterrupt+0x8c>
     c64:	85 b7       	in	r24, 0x35	; 53
     c66:	84 60       	ori	r24, 0x04	; 4
     c68:	85 bf       	out	0x35, r24	; 53
     c6a:	85 b7       	in	r24, 0x35	; 53
     c6c:	87 7f       	andi	r24, 0xF7	; 247
     c6e:	85 bf       	out	0x35, r24	; 53
     c70:	08 95       	ret
     c72:	63 30       	cpi	r22, 0x03	; 3
     c74:	91 f4       	brne	.+36     	; 0xc9a <Interrupts_ConfigExtInterrupt+0xb4>
     c76:	85 b7       	in	r24, 0x35	; 53
     c78:	8b 7f       	andi	r24, 0xFB	; 251
     c7a:	85 bf       	out	0x35, r24	; 53
     c7c:	85 b7       	in	r24, 0x35	; 53
     c7e:	87 7f       	andi	r24, 0xF7	; 247
     c80:	85 bf       	out	0x35, r24	; 53
     c82:	08 95       	ret
     c84:	61 30       	cpi	r22, 0x01	; 1
     c86:	21 f4       	brne	.+8      	; 0xc90 <Interrupts_ConfigExtInterrupt+0xaa>
     c88:	84 b7       	in	r24, 0x34	; 52
     c8a:	80 64       	ori	r24, 0x40	; 64
     c8c:	84 bf       	out	0x34, r24	; 52
     c8e:	08 95       	ret
     c90:	61 11       	cpse	r22, r1
     c92:	03 c0       	rjmp	.+6      	; 0xc9a <Interrupts_ConfigExtInterrupt+0xb4>
     c94:	84 b7       	in	r24, 0x34	; 52
     c96:	8f 7b       	andi	r24, 0xBF	; 191
     c98:	84 bf       	out	0x34, r24	; 52
     c9a:	08 95       	ret

00000c9c <Interrupts_RegisterCallbackExtInt0>:
     c9c:	00 97       	sbiw	r24, 0x00	; 0
     c9e:	21 f0       	breq	.+8      	; 0xca8 <Interrupts_RegisterCallbackExtInt0+0xc>
     ca0:	90 93 72 00 	sts	0x0072, r25	; 0x800072 <ExtInterrupt0CallBackPtr+0x1>
     ca4:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <ExtInterrupt0CallBackPtr>
     ca8:	08 95       	ret

00000caa <__vector_1>:
	}
}
ISR(EXT_INT_0)
{
     caa:	1f 92       	push	r1
     cac:	0f 92       	push	r0
     cae:	0f b6       	in	r0, 0x3f	; 63
     cb0:	0f 92       	push	r0
     cb2:	11 24       	eor	r1, r1
     cb4:	2f 93       	push	r18
     cb6:	3f 93       	push	r19
     cb8:	4f 93       	push	r20
     cba:	5f 93       	push	r21
     cbc:	6f 93       	push	r22
     cbe:	7f 93       	push	r23
     cc0:	8f 93       	push	r24
     cc2:	9f 93       	push	r25
     cc4:	af 93       	push	r26
     cc6:	bf 93       	push	r27
     cc8:	ef 93       	push	r30
     cca:	ff 93       	push	r31
	if(ExtInterrupt0CallBackPtr != NULL)
     ccc:	e0 91 71 00 	lds	r30, 0x0071	; 0x800071 <ExtInterrupt0CallBackPtr>
     cd0:	f0 91 72 00 	lds	r31, 0x0072	; 0x800072 <ExtInterrupt0CallBackPtr+0x1>
     cd4:	30 97       	sbiw	r30, 0x00	; 0
     cd6:	09 f0       	breq	.+2      	; 0xcda <__vector_1+0x30>
	{
		(*ExtInterrupt0CallBackPtr)();
     cd8:	09 95       	icall
	}
}
     cda:	ff 91       	pop	r31
     cdc:	ef 91       	pop	r30
     cde:	bf 91       	pop	r27
     ce0:	af 91       	pop	r26
     ce2:	9f 91       	pop	r25
     ce4:	8f 91       	pop	r24
     ce6:	7f 91       	pop	r23
     ce8:	6f 91       	pop	r22
     cea:	5f 91       	pop	r21
     cec:	4f 91       	pop	r20
     cee:	3f 91       	pop	r19
     cf0:	2f 91       	pop	r18
     cf2:	0f 90       	pop	r0
     cf4:	0f be       	out	0x3f, r0	; 63
     cf6:	0f 90       	pop	r0
     cf8:	1f 90       	pop	r1
     cfa:	18 95       	reti

00000cfc <__vector_2>:
ISR(EXT_INT_1)
{
     cfc:	1f 92       	push	r1
     cfe:	0f 92       	push	r0
     d00:	0f b6       	in	r0, 0x3f	; 63
     d02:	0f 92       	push	r0
     d04:	11 24       	eor	r1, r1
     d06:	2f 93       	push	r18
     d08:	3f 93       	push	r19
     d0a:	4f 93       	push	r20
     d0c:	5f 93       	push	r21
     d0e:	6f 93       	push	r22
     d10:	7f 93       	push	r23
     d12:	8f 93       	push	r24
     d14:	9f 93       	push	r25
     d16:	af 93       	push	r26
     d18:	bf 93       	push	r27
     d1a:	ef 93       	push	r30
     d1c:	ff 93       	push	r31
	if(ExtInterrupt0CallBackPtr != NULL)
     d1e:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <ExtInterrupt0CallBackPtr>
     d22:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <ExtInterrupt0CallBackPtr+0x1>
     d26:	89 2b       	or	r24, r25
     d28:	29 f0       	breq	.+10     	; 0xd34 <__vector_2+0x38>
	{
		(*ExtInterrupt1CallBackPtr)();
     d2a:	e0 91 6f 00 	lds	r30, 0x006F	; 0x80006f <ExtInterrupt1CallBackPtr>
     d2e:	f0 91 70 00 	lds	r31, 0x0070	; 0x800070 <ExtInterrupt1CallBackPtr+0x1>
     d32:	09 95       	icall
	}
}
     d34:	ff 91       	pop	r31
     d36:	ef 91       	pop	r30
     d38:	bf 91       	pop	r27
     d3a:	af 91       	pop	r26
     d3c:	9f 91       	pop	r25
     d3e:	8f 91       	pop	r24
     d40:	7f 91       	pop	r23
     d42:	6f 91       	pop	r22
     d44:	5f 91       	pop	r21
     d46:	4f 91       	pop	r20
     d48:	3f 91       	pop	r19
     d4a:	2f 91       	pop	r18
     d4c:	0f 90       	pop	r0
     d4e:	0f be       	out	0x3f, r0	; 63
     d50:	0f 90       	pop	r0
     d52:	1f 90       	pop	r1
     d54:	18 95       	reti

00000d56 <__vector_3>:
ISR(EXT_INT_2)
{
     d56:	1f 92       	push	r1
     d58:	0f 92       	push	r0
     d5a:	0f b6       	in	r0, 0x3f	; 63
     d5c:	0f 92       	push	r0
     d5e:	11 24       	eor	r1, r1
     d60:	2f 93       	push	r18
     d62:	3f 93       	push	r19
     d64:	4f 93       	push	r20
     d66:	5f 93       	push	r21
     d68:	6f 93       	push	r22
     d6a:	7f 93       	push	r23
     d6c:	8f 93       	push	r24
     d6e:	9f 93       	push	r25
     d70:	af 93       	push	r26
     d72:	bf 93       	push	r27
     d74:	ef 93       	push	r30
     d76:	ff 93       	push	r31
	if(ExtInterrupt0CallBackPtr != NULL)
     d78:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <ExtInterrupt0CallBackPtr>
     d7c:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <ExtInterrupt0CallBackPtr+0x1>
     d80:	89 2b       	or	r24, r25
     d82:	29 f0       	breq	.+10     	; 0xd8e <__vector_3+0x38>
	{
		(*ExtInterrupt2CallBackPtr)();
     d84:	e0 91 6d 00 	lds	r30, 0x006D	; 0x80006d <ExtInterrupt2CallBackPtr>
     d88:	f0 91 6e 00 	lds	r31, 0x006E	; 0x80006e <ExtInterrupt2CallBackPtr+0x1>
     d8c:	09 95       	icall
	}
     d8e:	ff 91       	pop	r31
     d90:	ef 91       	pop	r30
     d92:	bf 91       	pop	r27
     d94:	af 91       	pop	r26
     d96:	9f 91       	pop	r25
     d98:	8f 91       	pop	r24
     d9a:	7f 91       	pop	r23
     d9c:	6f 91       	pop	r22
     d9e:	5f 91       	pop	r21
     da0:	4f 91       	pop	r20
     da2:	3f 91       	pop	r19
     da4:	2f 91       	pop	r18
     da6:	0f 90       	pop	r0
     da8:	0f be       	out	0x3f, r0	; 63
     daa:	0f 90       	pop	r0
     dac:	1f 90       	pop	r1
     dae:	18 95       	reti

00000db0 <Timer_IncCounterTimer2>:
			OverFlowCounter++;
			Timer_ResetOverFlowFlagTimer2();
		}
	}
	Timer_StopTimer2();
}
     db0:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <Timer2AccumulatedCounter>
     db4:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <Timer2AccumulatedCounter+0x1>
     db8:	a0 91 79 00 	lds	r26, 0x0079	; 0x800079 <Timer2AccumulatedCounter+0x2>
     dbc:	b0 91 7a 00 	lds	r27, 0x007A	; 0x80007a <Timer2AccumulatedCounter+0x3>
     dc0:	9f 5f       	subi	r25, 0xFF	; 255
     dc2:	af 4f       	sbci	r26, 0xFF	; 255
     dc4:	bf 4f       	sbci	r27, 0xFF	; 255
     dc6:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <Timer2AccumulatedCounter>
     dca:	90 93 78 00 	sts	0x0078, r25	; 0x800078 <Timer2AccumulatedCounter+0x1>
     dce:	a0 93 79 00 	sts	0x0079, r26	; 0x800079 <Timer2AccumulatedCounter+0x2>
     dd2:	b0 93 7a 00 	sts	0x007A, r27	; 0x80007a <Timer2AccumulatedCounter+0x3>
     dd6:	08 95       	ret

00000dd8 <__vector_11>:
     dd8:	1f 92       	push	r1
     dda:	0f 92       	push	r0
     ddc:	0f b6       	in	r0, 0x3f	; 63
     dde:	0f 92       	push	r0
     de0:	11 24       	eor	r1, r1
     de2:	2f 93       	push	r18
     de4:	3f 93       	push	r19
     de6:	4f 93       	push	r20
     de8:	5f 93       	push	r21
     dea:	6f 93       	push	r22
     dec:	7f 93       	push	r23
     dee:	8f 93       	push	r24
     df0:	9f 93       	push	r25
     df2:	af 93       	push	r26
     df4:	bf 93       	push	r27
     df6:	ef 93       	push	r30
     df8:	ff 93       	push	r31
     dfa:	e0 91 75 00 	lds	r30, 0x0075	; 0x800075 <Timer0OVFCallBackPtr>
     dfe:	f0 91 76 00 	lds	r31, 0x0076	; 0x800076 <Timer0OVFCallBackPtr+0x1>
     e02:	30 97       	sbiw	r30, 0x00	; 0
     e04:	09 f0       	breq	.+2      	; 0xe08 <__vector_11+0x30>
     e06:	09 95       	icall
     e08:	ff 91       	pop	r31
     e0a:	ef 91       	pop	r30
     e0c:	bf 91       	pop	r27
     e0e:	af 91       	pop	r26
     e10:	9f 91       	pop	r25
     e12:	8f 91       	pop	r24
     e14:	7f 91       	pop	r23
     e16:	6f 91       	pop	r22
     e18:	5f 91       	pop	r21
     e1a:	4f 91       	pop	r20
     e1c:	3f 91       	pop	r19
     e1e:	2f 91       	pop	r18
     e20:	0f 90       	pop	r0
     e22:	0f be       	out	0x3f, r0	; 63
     e24:	0f 90       	pop	r0
     e26:	1f 90       	pop	r1
     e28:	18 95       	reti

00000e2a <__vector_5>:
     e2a:	1f 92       	push	r1
     e2c:	0f 92       	push	r0
     e2e:	0f b6       	in	r0, 0x3f	; 63
     e30:	0f 92       	push	r0
     e32:	11 24       	eor	r1, r1
     e34:	2f 93       	push	r18
     e36:	3f 93       	push	r19
     e38:	4f 93       	push	r20
     e3a:	5f 93       	push	r21
     e3c:	6f 93       	push	r22
     e3e:	7f 93       	push	r23
     e40:	8f 93       	push	r24
     e42:	9f 93       	push	r25
     e44:	af 93       	push	r26
     e46:	bf 93       	push	r27
     e48:	ef 93       	push	r30
     e4a:	ff 93       	push	r31
     e4c:	e0 91 73 00 	lds	r30, 0x0073	; 0x800073 <Timer2OVFCallBackPtr>
     e50:	f0 91 74 00 	lds	r31, 0x0074	; 0x800074 <Timer2OVFCallBackPtr+0x1>
     e54:	30 97       	sbiw	r30, 0x00	; 0
     e56:	09 f0       	breq	.+2      	; 0xe5a <__vector_5+0x30>
     e58:	09 95       	icall
     e5a:	ff 91       	pop	r31
     e5c:	ef 91       	pop	r30
     e5e:	bf 91       	pop	r27
     e60:	af 91       	pop	r26
     e62:	9f 91       	pop	r25
     e64:	8f 91       	pop	r24
     e66:	7f 91       	pop	r23
     e68:	6f 91       	pop	r22
     e6a:	5f 91       	pop	r21
     e6c:	4f 91       	pop	r20
     e6e:	3f 91       	pop	r19
     e70:	2f 91       	pop	r18
     e72:	0f 90       	pop	r0
     e74:	0f be       	out	0x3f, r0	; 63
     e76:	0f 90       	pop	r0
     e78:	1f 90       	pop	r1
     e7a:	18 95       	reti

00000e7c <Timer_ConfigTimer0>:
     e7c:	81 30       	cpi	r24, 0x01	; 1
     e7e:	79 f0       	breq	.+30     	; 0xe9e <Timer_ConfigTimer0+0x22>
     e80:	28 f0       	brcs	.+10     	; 0xe8c <Timer_ConfigTimer0+0x10>
     e82:	82 30       	cpi	r24, 0x02	; 2
     e84:	81 f0       	breq	.+32     	; 0xea6 <Timer_ConfigTimer0+0x2a>
     e86:	83 30       	cpi	r24, 0x03	; 3
     e88:	19 f0       	breq	.+6      	; 0xe90 <Timer_ConfigTimer0+0x14>
     e8a:	08 95       	ret
     e8c:	13 be       	out	0x33, r1	; 51
     e8e:	08 95       	ret
     e90:	83 b7       	in	r24, 0x33	; 51
     e92:	88 60       	ori	r24, 0x08	; 8
     e94:	83 bf       	out	0x33, r24	; 51
     e96:	83 b7       	in	r24, 0x33	; 51
     e98:	80 64       	ori	r24, 0x40	; 64
     e9a:	83 bf       	out	0x33, r24	; 51
     e9c:	08 95       	ret
     e9e:	83 b7       	in	r24, 0x33	; 51
     ea0:	80 64       	ori	r24, 0x40	; 64
     ea2:	83 bf       	out	0x33, r24	; 51
     ea4:	08 95       	ret
     ea6:	83 b7       	in	r24, 0x33	; 51
     ea8:	88 60       	ori	r24, 0x08	; 8
     eaa:	83 bf       	out	0x33, r24	; 51
     eac:	08 95       	ret

00000eae <Timer_SetValueTimer0>:
     eae:	82 bf       	out	0x32, r24	; 50
     eb0:	08 95       	ret

00000eb2 <Timer_StartTimer0>:
     eb2:	83 30       	cpi	r24, 0x03	; 3
     eb4:	a9 f0       	breq	.+42     	; 0xee0 <Timer_StartTimer0+0x2e>
     eb6:	28 f4       	brcc	.+10     	; 0xec2 <Timer_StartTimer0+0x10>
     eb8:	88 23       	and	r24, r24
     eba:	41 f0       	breq	.+16     	; 0xecc <Timer_StartTimer0+0x1a>
     ebc:	81 30       	cpi	r24, 0x01	; 1
     ebe:	59 f0       	breq	.+22     	; 0xed6 <Timer_StartTimer0+0x24>
     ec0:	08 95       	ret
     ec2:	85 30       	cpi	r24, 0x05	; 5
     ec4:	91 f0       	breq	.+36     	; 0xeea <Timer_StartTimer0+0x38>
     ec6:	86 30       	cpi	r24, 0x06	; 6
     ec8:	a9 f0       	breq	.+42     	; 0xef4 <Timer_StartTimer0+0x42>
     eca:	08 95       	ret
     ecc:	83 b7       	in	r24, 0x33	; 51
     ece:	88 7f       	andi	r24, 0xF8	; 248
     ed0:	81 60       	ori	r24, 0x01	; 1
     ed2:	83 bf       	out	0x33, r24	; 51
     ed4:	08 95       	ret
     ed6:	83 b7       	in	r24, 0x33	; 51
     ed8:	88 7f       	andi	r24, 0xF8	; 248
     eda:	82 60       	ori	r24, 0x02	; 2
     edc:	83 bf       	out	0x33, r24	; 51
     ede:	08 95       	ret
     ee0:	83 b7       	in	r24, 0x33	; 51
     ee2:	88 7f       	andi	r24, 0xF8	; 248
     ee4:	83 60       	ori	r24, 0x03	; 3
     ee6:	83 bf       	out	0x33, r24	; 51
     ee8:	08 95       	ret
     eea:	83 b7       	in	r24, 0x33	; 51
     eec:	88 7f       	andi	r24, 0xF8	; 248
     eee:	84 60       	ori	r24, 0x04	; 4
     ef0:	83 bf       	out	0x33, r24	; 51
     ef2:	08 95       	ret
     ef4:	83 b7       	in	r24, 0x33	; 51
     ef6:	88 7f       	andi	r24, 0xF8	; 248
     ef8:	85 60       	ori	r24, 0x05	; 5
     efa:	83 bf       	out	0x33, r24	; 51
     efc:	08 95       	ret

00000efe <Timer_StopTimer0>:
     efe:	83 b7       	in	r24, 0x33	; 51
     f00:	88 7f       	andi	r24, 0xF8	; 248
     f02:	83 bf       	out	0x33, r24	; 51
     f04:	08 95       	ret

00000f06 <Timer_ResetOverFlowFlagTimer0>:
     f06:	88 b7       	in	r24, 0x38	; 56
     f08:	81 60       	ori	r24, 0x01	; 1
     f0a:	88 bf       	out	0x38, r24	; 56
     f0c:	08 95       	ret

00000f0e <Timer_GetStateTimer0>:
     f0e:	88 b7       	in	r24, 0x38	; 56
     f10:	81 70       	andi	r24, 0x01	; 1
     f12:	08 95       	ret

00000f14 <Timer_BusyDelaymsTimer0>:
     f14:	8f 92       	push	r8
     f16:	9f 92       	push	r9
     f18:	af 92       	push	r10
     f1a:	bf 92       	push	r11
     f1c:	cf 92       	push	r12
     f1e:	df 92       	push	r13
     f20:	ef 92       	push	r14
     f22:	ff 92       	push	r15
     f24:	cf 93       	push	r28
     f26:	df 93       	push	r29
     f28:	00 d0       	rcall	.+0      	; 0xf2a <Timer_BusyDelaymsTimer0+0x16>
     f2a:	00 d0       	rcall	.+0      	; 0xf2c <Timer_BusyDelaymsTimer0+0x18>
     f2c:	cd b7       	in	r28, 0x3d	; 61
     f2e:	de b7       	in	r29, 0x3e	; 62
     f30:	6b 01       	movw	r12, r22
     f32:	7c 01       	movw	r14, r24
     f34:	0e 94 7f 07 	call	0xefe	; 0xefe <Timer_StopTimer0>
     f38:	0e 94 83 07 	call	0xf06	; 0xf06 <Timer_ResetOverFlowFlagTimer0>
     f3c:	8f e6       	ldi	r24, 0x6F	; 111
     f3e:	92 e1       	ldi	r25, 0x12	; 18
     f40:	a3 e8       	ldi	r26, 0x83	; 131
     f42:	bd e3       	ldi	r27, 0x3D	; 61
     f44:	89 83       	std	Y+1, r24	; 0x01
     f46:	9a 83       	std	Y+2, r25	; 0x02
     f48:	ab 83       	std	Y+3, r26	; 0x03
     f4a:	bc 83       	std	Y+4, r27	; 0x04
     f4c:	29 81       	ldd	r18, Y+1	; 0x01
     f4e:	3a 81       	ldd	r19, Y+2	; 0x02
     f50:	4b 81       	ldd	r20, Y+3	; 0x03
     f52:	5c 81       	ldd	r21, Y+4	; 0x04
     f54:	c7 01       	movw	r24, r14
     f56:	b6 01       	movw	r22, r12
     f58:	0e 94 25 09 	call	0x124a	; 0x124a <__divsf3>
     f5c:	0e 94 97 09 	call	0x132e	; 0x132e <__fixunssfsi>
     f60:	c7 2e       	mov	r12, r23
     f62:	d8 2e       	mov	r13, r24
     f64:	e9 2e       	mov	r14, r25
     f66:	ff 24       	eor	r15, r15
     f68:	2f ef       	ldi	r18, 0xFF	; 255
     f6a:	c2 1a       	sub	r12, r18
     f6c:	d2 0a       	sbc	r13, r18
     f6e:	e2 0a       	sbc	r14, r18
     f70:	f2 0a       	sbc	r15, r18
     f72:	86 2f       	mov	r24, r22
     f74:	81 95       	neg	r24
     f76:	0e 94 57 07 	call	0xeae	; 0xeae <Timer_SetValueTimer0>
     f7a:	83 e0       	ldi	r24, 0x03	; 3
     f7c:	0e 94 59 07 	call	0xeb2	; 0xeb2 <Timer_StartTimer0>
     f80:	81 2c       	mov	r8, r1
     f82:	91 2c       	mov	r9, r1
     f84:	54 01       	movw	r10, r8
     f86:	0b c0       	rjmp	.+22     	; 0xf9e <Timer_BusyDelaymsTimer0+0x8a>
     f88:	0e 94 87 07 	call	0xf0e	; 0xf0e <Timer_GetStateTimer0>
     f8c:	88 23       	and	r24, r24
     f8e:	39 f0       	breq	.+14     	; 0xf9e <Timer_BusyDelaymsTimer0+0x8a>
     f90:	8f ef       	ldi	r24, 0xFF	; 255
     f92:	88 1a       	sub	r8, r24
     f94:	98 0a       	sbc	r9, r24
     f96:	a8 0a       	sbc	r10, r24
     f98:	b8 0a       	sbc	r11, r24
     f9a:	0e 94 83 07 	call	0xf06	; 0xf06 <Timer_ResetOverFlowFlagTimer0>
     f9e:	8c 14       	cp	r8, r12
     fa0:	9d 04       	cpc	r9, r13
     fa2:	ae 04       	cpc	r10, r14
     fa4:	bf 04       	cpc	r11, r15
     fa6:	80 f3       	brcs	.-32     	; 0xf88 <Timer_BusyDelaymsTimer0+0x74>
     fa8:	0e 94 7f 07 	call	0xefe	; 0xefe <Timer_StopTimer0>
     fac:	0f 90       	pop	r0
     fae:	0f 90       	pop	r0
     fb0:	0f 90       	pop	r0
     fb2:	0f 90       	pop	r0
     fb4:	df 91       	pop	r29
     fb6:	cf 91       	pop	r28
     fb8:	ff 90       	pop	r15
     fba:	ef 90       	pop	r14
     fbc:	df 90       	pop	r13
     fbe:	cf 90       	pop	r12
     fc0:	bf 90       	pop	r11
     fc2:	af 90       	pop	r10
     fc4:	9f 90       	pop	r9
     fc6:	8f 90       	pop	r8
     fc8:	08 95       	ret

00000fca <Timer_ConfigTimer2>:
     fca:	81 30       	cpi	r24, 0x01	; 1
     fcc:	79 f0       	breq	.+30     	; 0xfec <Timer_ConfigTimer2+0x22>
     fce:	28 f0       	brcs	.+10     	; 0xfda <Timer_ConfigTimer2+0x10>
     fd0:	82 30       	cpi	r24, 0x02	; 2
     fd2:	81 f0       	breq	.+32     	; 0xff4 <Timer_ConfigTimer2+0x2a>
     fd4:	83 30       	cpi	r24, 0x03	; 3
     fd6:	19 f0       	breq	.+6      	; 0xfde <Timer_ConfigTimer2+0x14>
     fd8:	08 95       	ret
     fda:	15 bc       	out	0x25, r1	; 37
     fdc:	08 95       	ret
     fde:	85 b5       	in	r24, 0x25	; 37
     fe0:	88 60       	ori	r24, 0x08	; 8
     fe2:	85 bd       	out	0x25, r24	; 37
     fe4:	85 b5       	in	r24, 0x25	; 37
     fe6:	80 64       	ori	r24, 0x40	; 64
     fe8:	85 bd       	out	0x25, r24	; 37
     fea:	08 95       	ret
     fec:	85 b5       	in	r24, 0x25	; 37
     fee:	80 64       	ori	r24, 0x40	; 64
     ff0:	85 bd       	out	0x25, r24	; 37
     ff2:	08 95       	ret
     ff4:	85 b5       	in	r24, 0x25	; 37
     ff6:	88 60       	ori	r24, 0x08	; 8
     ff8:	85 bd       	out	0x25, r24	; 37
     ffa:	08 95       	ret

00000ffc <Timer_SetValueTimer2>:
     ffc:	84 bd       	out	0x24, r24	; 36
     ffe:	08 95       	ret

00001000 <Timer_StartTimer2>:
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	87 30       	cpi	r24, 0x07	; 7
    1004:	91 05       	cpc	r25, r1
    1006:	30 f5       	brcc	.+76     	; 0x1054 <Timer_StartTimer2+0x54>
    1008:	fc 01       	movw	r30, r24
    100a:	e6 5d       	subi	r30, 0xD6	; 214
    100c:	ff 4f       	sbci	r31, 0xFF	; 255
    100e:	0c 94 ea 0a 	jmp	0x15d4	; 0x15d4 <__tablejump2__>
    1012:	85 b5       	in	r24, 0x25	; 37
    1014:	88 7f       	andi	r24, 0xF8	; 248
    1016:	81 60       	ori	r24, 0x01	; 1
    1018:	85 bd       	out	0x25, r24	; 37
    101a:	08 95       	ret
    101c:	85 b5       	in	r24, 0x25	; 37
    101e:	88 7f       	andi	r24, 0xF8	; 248
    1020:	82 60       	ori	r24, 0x02	; 2
    1022:	85 bd       	out	0x25, r24	; 37
    1024:	08 95       	ret
    1026:	85 b5       	in	r24, 0x25	; 37
    1028:	88 7f       	andi	r24, 0xF8	; 248
    102a:	83 60       	ori	r24, 0x03	; 3
    102c:	85 bd       	out	0x25, r24	; 37
    102e:	08 95       	ret
    1030:	85 b5       	in	r24, 0x25	; 37
    1032:	88 7f       	andi	r24, 0xF8	; 248
    1034:	84 60       	ori	r24, 0x04	; 4
    1036:	85 bd       	out	0x25, r24	; 37
    1038:	08 95       	ret
    103a:	85 b5       	in	r24, 0x25	; 37
    103c:	88 7f       	andi	r24, 0xF8	; 248
    103e:	85 60       	ori	r24, 0x05	; 5
    1040:	85 bd       	out	0x25, r24	; 37
    1042:	08 95       	ret
    1044:	85 b5       	in	r24, 0x25	; 37
    1046:	88 7f       	andi	r24, 0xF8	; 248
    1048:	86 60       	ori	r24, 0x06	; 6
    104a:	85 bd       	out	0x25, r24	; 37
    104c:	08 95       	ret
    104e:	85 b5       	in	r24, 0x25	; 37
    1050:	87 60       	ori	r24, 0x07	; 7
    1052:	85 bd       	out	0x25, r24	; 37
    1054:	08 95       	ret

00001056 <Timer_StopTimer2>:
    1056:	85 b5       	in	r24, 0x25	; 37
    1058:	88 7f       	andi	r24, 0xF8	; 248
    105a:	85 bd       	out	0x25, r24	; 37
    105c:	08 95       	ret

0000105e <Timer_ResetOverFlowFlagTimer2>:
    105e:	88 b7       	in	r24, 0x38	; 56
    1060:	80 64       	ori	r24, 0x40	; 64
    1062:	88 bf       	out	0x38, r24	; 56
    1064:	08 95       	ret

00001066 <Timer_GetStateTimer2>:
    1066:	88 b7       	in	r24, 0x38	; 56
    1068:	80 74       	andi	r24, 0x40	; 64
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	a0 e0       	ldi	r26, 0x00	; 0
    106e:	b0 e0       	ldi	r27, 0x00	; 0
    1070:	68 94       	set
    1072:	15 f8       	bld	r1, 5
    1074:	b6 95       	lsr	r27
    1076:	a7 95       	ror	r26
    1078:	97 95       	ror	r25
    107a:	87 95       	ror	r24
    107c:	16 94       	lsr	r1
    107e:	d1 f7       	brne	.-12     	; 0x1074 <Timer_GetStateTimer2+0xe>
    1080:	08 95       	ret

00001082 <Timer_GetValueTimer2>:
    1082:	84 b5       	in	r24, 0x24	; 36
    1084:	08 95       	ret

00001086 <Timer_EnableTimer2OV>:
    1086:	89 b7       	in	r24, 0x39	; 57
    1088:	80 64       	ori	r24, 0x40	; 64
    108a:	89 bf       	out	0x39, r24	; 57
    108c:	08 95       	ret

0000108e <Timer_DisableTimer2OV>:
    108e:	89 b7       	in	r24, 0x39	; 57
    1090:	8f 7b       	andi	r24, 0xBF	; 191
    1092:	89 bf       	out	0x39, r24	; 57
    1094:	08 95       	ret

00001096 <Timer_RegisterCallbackTimer2OV>:
    1096:	00 97       	sbiw	r24, 0x00	; 0
    1098:	21 f0       	breq	.+8      	; 0x10a2 <Timer_RegisterCallbackTimer2OV+0xc>
    109a:	90 93 74 00 	sts	0x0074, r25	; 0x800074 <Timer2OVFCallBackPtr+0x1>
    109e:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <Timer2OVFCallBackPtr>
    10a2:	08 95       	ret

000010a4 <Timer_StartCountingTimer2>:
void Timer_StartCountingTimer2(void)
{
	Timer2AccumulatedCounter = 0;
    10a4:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <Timer2AccumulatedCounter>
    10a8:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <Timer2AccumulatedCounter+0x1>
    10ac:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <Timer2AccumulatedCounter+0x2>
    10b0:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <Timer2AccumulatedCounter+0x3>
	Timer_StopTimer2();
    10b4:	0e 94 2b 08 	call	0x1056	; 0x1056 <Timer_StopTimer2>
	Timer_SetValueTimer2(0.0F);
    10b8:	80 e0       	ldi	r24, 0x00	; 0
    10ba:	0e 94 fe 07 	call	0xffc	; 0xffc <Timer_SetValueTimer2>
	if(Timer_GetStateTimer2() != NO_OVERFLOW)
    10be:	0e 94 33 08 	call	0x1066	; 0x1066 <Timer_GetStateTimer2>
    10c2:	81 11       	cpse	r24, r1
	{
		Timer_ResetOverFlowFlagTimer2();
    10c4:	0e 94 2f 08 	call	0x105e	; 0x105e <Timer_ResetOverFlowFlagTimer2>
	}
	Timer_RegisterCallbackTimer2OV(Timer_IncCounterTimer2);
    10c8:	88 ed       	ldi	r24, 0xD8	; 216
    10ca:	96 e0       	ldi	r25, 0x06	; 6
    10cc:	0e 94 4b 08 	call	0x1096	; 0x1096 <Timer_RegisterCallbackTimer2OV>
	Timer_EnableTimer2OV();
    10d0:	0e 94 43 08 	call	0x1086	; 0x1086 <Timer_EnableTimer2OV>
	Timer_StartTimer2(COUNTING_PRESCALE);
    10d4:	83 e0       	ldi	r24, 0x03	; 3
    10d6:	0e 94 00 08 	call	0x1000	; 0x1000 <Timer_StartTimer2>
    10da:	08 95       	ret

000010dc <Timer_StopCountingTimer2>:
}
void Timer_StopCountingTimer2(void)
{
	Timer_StopTimer2();
    10dc:	0e 94 2b 08 	call	0x1056	; 0x1056 <Timer_StopTimer2>
	Timer2AccumulatedCounter += Timer_GetValueTimer2();
    10e0:	0e 94 41 08 	call	0x1082	; 0x1082 <Timer_GetValueTimer2>
    10e4:	40 91 77 00 	lds	r20, 0x0077	; 0x800077 <Timer2AccumulatedCounter>
    10e8:	50 91 78 00 	lds	r21, 0x0078	; 0x800078 <Timer2AccumulatedCounter+0x1>
    10ec:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <Timer2AccumulatedCounter+0x2>
    10f0:	70 91 7a 00 	lds	r23, 0x007A	; 0x80007a <Timer2AccumulatedCounter+0x3>
    10f4:	48 0f       	add	r20, r24
    10f6:	51 1d       	adc	r21, r1
    10f8:	61 1d       	adc	r22, r1
    10fa:	71 1d       	adc	r23, r1
    10fc:	40 93 77 00 	sts	0x0077, r20	; 0x800077 <Timer2AccumulatedCounter>
    1100:	50 93 78 00 	sts	0x0078, r21	; 0x800078 <Timer2AccumulatedCounter+0x1>
    1104:	60 93 79 00 	sts	0x0079, r22	; 0x800079 <Timer2AccumulatedCounter+0x2>
    1108:	70 93 7a 00 	sts	0x007A, r23	; 0x80007a <Timer2AccumulatedCounter+0x3>
	if(Timer_GetStateTimer2() != NO_OVERFLOW)
    110c:	0e 94 33 08 	call	0x1066	; 0x1066 <Timer_GetStateTimer2>
    1110:	81 11       	cpse	r24, r1
	{
		Timer_ResetOverFlowFlagTimer2();
    1112:	0e 94 2f 08 	call	0x105e	; 0x105e <Timer_ResetOverFlowFlagTimer2>
	}
	Timer_DisableTimer2OV();
    1116:	0e 94 47 08 	call	0x108e	; 0x108e <Timer_DisableTimer2OV>
    111a:	08 95       	ret

0000111c <Timer_GetCounterTimeTimer2>:
}
float32 Timer_GetCounterTimeTimer2(void)
{
    111c:	cf 93       	push	r28
    111e:	df 93       	push	r29
    1120:	00 d0       	rcall	.+0      	; 0x1122 <Timer_GetCounterTimeTimer2+0x6>
    1122:	00 d0       	rcall	.+0      	; 0x1124 <Timer_GetCounterTimeTimer2+0x8>
    1124:	cd b7       	in	r28, 0x3d	; 61
    1126:	de b7       	in	r29, 0x3e	; 62
	volatile float32 TickTime = ((1.0F/(F_CPU)) * 64.0F) * 1000.0;
    1128:	8f e6       	ldi	r24, 0x6F	; 111
    112a:	92 e1       	ldi	r25, 0x12	; 18
    112c:	a3 e8       	ldi	r26, 0x83	; 131
    112e:	bd e3       	ldi	r27, 0x3D	; 61
    1130:	89 83       	std	Y+1, r24	; 0x01
    1132:	9a 83       	std	Y+2, r25	; 0x02
    1134:	ab 83       	std	Y+3, r26	; 0x03
    1136:	bc 83       	std	Y+4, r27	; 0x04
	return ((float32)Timer2AccumulatedCounter * TickTime);
    1138:	60 91 77 00 	lds	r22, 0x0077	; 0x800077 <Timer2AccumulatedCounter>
    113c:	70 91 78 00 	lds	r23, 0x0078	; 0x800078 <Timer2AccumulatedCounter+0x1>
    1140:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <Timer2AccumulatedCounter+0x2>
    1144:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <Timer2AccumulatedCounter+0x3>
    1148:	0e 94 c6 09 	call	0x138c	; 0x138c <__floatunsisf>
    114c:	29 81       	ldd	r18, Y+1	; 0x01
    114e:	3a 81       	ldd	r19, Y+2	; 0x02
    1150:	4b 81       	ldd	r20, Y+3	; 0x03
    1152:	5c 81       	ldd	r21, Y+4	; 0x04
    1154:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <__mulsf3>
}
    1158:	0f 90       	pop	r0
    115a:	0f 90       	pop	r0
    115c:	0f 90       	pop	r0
    115e:	0f 90       	pop	r0
    1160:	df 91       	pop	r29
    1162:	cf 91       	pop	r28
    1164:	08 95       	ret

00001166 <__subsf3>:
    1166:	50 58       	subi	r21, 0x80	; 128

00001168 <__addsf3>:
    1168:	bb 27       	eor	r27, r27
    116a:	aa 27       	eor	r26, r26
    116c:	0e 94 cb 08 	call	0x1196	; 0x1196 <__addsf3x>
    1170:	0c 94 3e 0a 	jmp	0x147c	; 0x147c <__fp_round>
    1174:	0e 94 30 0a 	call	0x1460	; 0x1460 <__fp_pscA>
    1178:	38 f0       	brcs	.+14     	; 0x1188 <__addsf3+0x20>
    117a:	0e 94 37 0a 	call	0x146e	; 0x146e <__fp_pscB>
    117e:	20 f0       	brcs	.+8      	; 0x1188 <__addsf3+0x20>
    1180:	39 f4       	brne	.+14     	; 0x1190 <__addsf3+0x28>
    1182:	9f 3f       	cpi	r25, 0xFF	; 255
    1184:	19 f4       	brne	.+6      	; 0x118c <__addsf3+0x24>
    1186:	26 f4       	brtc	.+8      	; 0x1190 <__addsf3+0x28>
    1188:	0c 94 2d 0a 	jmp	0x145a	; 0x145a <__fp_nan>
    118c:	0e f4       	brtc	.+2      	; 0x1190 <__addsf3+0x28>
    118e:	e0 95       	com	r30
    1190:	e7 fb       	bst	r30, 7
    1192:	0c 94 27 0a 	jmp	0x144e	; 0x144e <__fp_inf>

00001196 <__addsf3x>:
    1196:	e9 2f       	mov	r30, r25
    1198:	0e 94 4f 0a 	call	0x149e	; 0x149e <__fp_split3>
    119c:	58 f3       	brcs	.-42     	; 0x1174 <__addsf3+0xc>
    119e:	ba 17       	cp	r27, r26
    11a0:	62 07       	cpc	r22, r18
    11a2:	73 07       	cpc	r23, r19
    11a4:	84 07       	cpc	r24, r20
    11a6:	95 07       	cpc	r25, r21
    11a8:	20 f0       	brcs	.+8      	; 0x11b2 <__addsf3x+0x1c>
    11aa:	79 f4       	brne	.+30     	; 0x11ca <__addsf3x+0x34>
    11ac:	a6 f5       	brtc	.+104    	; 0x1216 <__addsf3x+0x80>
    11ae:	0c 94 71 0a 	jmp	0x14e2	; 0x14e2 <__fp_zero>
    11b2:	0e f4       	brtc	.+2      	; 0x11b6 <__addsf3x+0x20>
    11b4:	e0 95       	com	r30
    11b6:	0b 2e       	mov	r0, r27
    11b8:	ba 2f       	mov	r27, r26
    11ba:	a0 2d       	mov	r26, r0
    11bc:	0b 01       	movw	r0, r22
    11be:	b9 01       	movw	r22, r18
    11c0:	90 01       	movw	r18, r0
    11c2:	0c 01       	movw	r0, r24
    11c4:	ca 01       	movw	r24, r20
    11c6:	a0 01       	movw	r20, r0
    11c8:	11 24       	eor	r1, r1
    11ca:	ff 27       	eor	r31, r31
    11cc:	59 1b       	sub	r21, r25
    11ce:	99 f0       	breq	.+38     	; 0x11f6 <__addsf3x+0x60>
    11d0:	59 3f       	cpi	r21, 0xF9	; 249
    11d2:	50 f4       	brcc	.+20     	; 0x11e8 <__addsf3x+0x52>
    11d4:	50 3e       	cpi	r21, 0xE0	; 224
    11d6:	68 f1       	brcs	.+90     	; 0x1232 <__addsf3x+0x9c>
    11d8:	1a 16       	cp	r1, r26
    11da:	f0 40       	sbci	r31, 0x00	; 0
    11dc:	a2 2f       	mov	r26, r18
    11de:	23 2f       	mov	r18, r19
    11e0:	34 2f       	mov	r19, r20
    11e2:	44 27       	eor	r20, r20
    11e4:	58 5f       	subi	r21, 0xF8	; 248
    11e6:	f3 cf       	rjmp	.-26     	; 0x11ce <__addsf3x+0x38>
    11e8:	46 95       	lsr	r20
    11ea:	37 95       	ror	r19
    11ec:	27 95       	ror	r18
    11ee:	a7 95       	ror	r26
    11f0:	f0 40       	sbci	r31, 0x00	; 0
    11f2:	53 95       	inc	r21
    11f4:	c9 f7       	brne	.-14     	; 0x11e8 <__addsf3x+0x52>
    11f6:	7e f4       	brtc	.+30     	; 0x1216 <__addsf3x+0x80>
    11f8:	1f 16       	cp	r1, r31
    11fa:	ba 0b       	sbc	r27, r26
    11fc:	62 0b       	sbc	r22, r18
    11fe:	73 0b       	sbc	r23, r19
    1200:	84 0b       	sbc	r24, r20
    1202:	ba f0       	brmi	.+46     	; 0x1232 <__addsf3x+0x9c>
    1204:	91 50       	subi	r25, 0x01	; 1
    1206:	a1 f0       	breq	.+40     	; 0x1230 <__addsf3x+0x9a>
    1208:	ff 0f       	add	r31, r31
    120a:	bb 1f       	adc	r27, r27
    120c:	66 1f       	adc	r22, r22
    120e:	77 1f       	adc	r23, r23
    1210:	88 1f       	adc	r24, r24
    1212:	c2 f7       	brpl	.-16     	; 0x1204 <__addsf3x+0x6e>
    1214:	0e c0       	rjmp	.+28     	; 0x1232 <__addsf3x+0x9c>
    1216:	ba 0f       	add	r27, r26
    1218:	62 1f       	adc	r22, r18
    121a:	73 1f       	adc	r23, r19
    121c:	84 1f       	adc	r24, r20
    121e:	48 f4       	brcc	.+18     	; 0x1232 <__addsf3x+0x9c>
    1220:	87 95       	ror	r24
    1222:	77 95       	ror	r23
    1224:	67 95       	ror	r22
    1226:	b7 95       	ror	r27
    1228:	f7 95       	ror	r31
    122a:	9e 3f       	cpi	r25, 0xFE	; 254
    122c:	08 f0       	brcs	.+2      	; 0x1230 <__addsf3x+0x9a>
    122e:	b0 cf       	rjmp	.-160    	; 0x1190 <__addsf3+0x28>
    1230:	93 95       	inc	r25
    1232:	88 0f       	add	r24, r24
    1234:	08 f0       	brcs	.+2      	; 0x1238 <__addsf3x+0xa2>
    1236:	99 27       	eor	r25, r25
    1238:	ee 0f       	add	r30, r30
    123a:	97 95       	ror	r25
    123c:	87 95       	ror	r24
    123e:	08 95       	ret

00001240 <__cmpsf2>:
    1240:	0e 94 03 0a 	call	0x1406	; 0x1406 <__fp_cmp>
    1244:	08 f4       	brcc	.+2      	; 0x1248 <__cmpsf2+0x8>
    1246:	81 e0       	ldi	r24, 0x01	; 1
    1248:	08 95       	ret

0000124a <__divsf3>:
    124a:	0e 94 39 09 	call	0x1272	; 0x1272 <__divsf3x>
    124e:	0c 94 3e 0a 	jmp	0x147c	; 0x147c <__fp_round>
    1252:	0e 94 37 0a 	call	0x146e	; 0x146e <__fp_pscB>
    1256:	58 f0       	brcs	.+22     	; 0x126e <__divsf3+0x24>
    1258:	0e 94 30 0a 	call	0x1460	; 0x1460 <__fp_pscA>
    125c:	40 f0       	brcs	.+16     	; 0x126e <__divsf3+0x24>
    125e:	29 f4       	brne	.+10     	; 0x126a <__divsf3+0x20>
    1260:	5f 3f       	cpi	r21, 0xFF	; 255
    1262:	29 f0       	breq	.+10     	; 0x126e <__divsf3+0x24>
    1264:	0c 94 27 0a 	jmp	0x144e	; 0x144e <__fp_inf>
    1268:	51 11       	cpse	r21, r1
    126a:	0c 94 72 0a 	jmp	0x14e4	; 0x14e4 <__fp_szero>
    126e:	0c 94 2d 0a 	jmp	0x145a	; 0x145a <__fp_nan>

00001272 <__divsf3x>:
    1272:	0e 94 4f 0a 	call	0x149e	; 0x149e <__fp_split3>
    1276:	68 f3       	brcs	.-38     	; 0x1252 <__divsf3+0x8>

00001278 <__divsf3_pse>:
    1278:	99 23       	and	r25, r25
    127a:	b1 f3       	breq	.-20     	; 0x1268 <__divsf3+0x1e>
    127c:	55 23       	and	r21, r21
    127e:	91 f3       	breq	.-28     	; 0x1264 <__divsf3+0x1a>
    1280:	95 1b       	sub	r25, r21
    1282:	55 0b       	sbc	r21, r21
    1284:	bb 27       	eor	r27, r27
    1286:	aa 27       	eor	r26, r26
    1288:	62 17       	cp	r22, r18
    128a:	73 07       	cpc	r23, r19
    128c:	84 07       	cpc	r24, r20
    128e:	38 f0       	brcs	.+14     	; 0x129e <__divsf3_pse+0x26>
    1290:	9f 5f       	subi	r25, 0xFF	; 255
    1292:	5f 4f       	sbci	r21, 0xFF	; 255
    1294:	22 0f       	add	r18, r18
    1296:	33 1f       	adc	r19, r19
    1298:	44 1f       	adc	r20, r20
    129a:	aa 1f       	adc	r26, r26
    129c:	a9 f3       	breq	.-22     	; 0x1288 <__divsf3_pse+0x10>
    129e:	35 d0       	rcall	.+106    	; 0x130a <__divsf3_pse+0x92>
    12a0:	0e 2e       	mov	r0, r30
    12a2:	3a f0       	brmi	.+14     	; 0x12b2 <__divsf3_pse+0x3a>
    12a4:	e0 e8       	ldi	r30, 0x80	; 128
    12a6:	32 d0       	rcall	.+100    	; 0x130c <__divsf3_pse+0x94>
    12a8:	91 50       	subi	r25, 0x01	; 1
    12aa:	50 40       	sbci	r21, 0x00	; 0
    12ac:	e6 95       	lsr	r30
    12ae:	00 1c       	adc	r0, r0
    12b0:	ca f7       	brpl	.-14     	; 0x12a4 <__divsf3_pse+0x2c>
    12b2:	2b d0       	rcall	.+86     	; 0x130a <__divsf3_pse+0x92>
    12b4:	fe 2f       	mov	r31, r30
    12b6:	29 d0       	rcall	.+82     	; 0x130a <__divsf3_pse+0x92>
    12b8:	66 0f       	add	r22, r22
    12ba:	77 1f       	adc	r23, r23
    12bc:	88 1f       	adc	r24, r24
    12be:	bb 1f       	adc	r27, r27
    12c0:	26 17       	cp	r18, r22
    12c2:	37 07       	cpc	r19, r23
    12c4:	48 07       	cpc	r20, r24
    12c6:	ab 07       	cpc	r26, r27
    12c8:	b0 e8       	ldi	r27, 0x80	; 128
    12ca:	09 f0       	breq	.+2      	; 0x12ce <__divsf3_pse+0x56>
    12cc:	bb 0b       	sbc	r27, r27
    12ce:	80 2d       	mov	r24, r0
    12d0:	bf 01       	movw	r22, r30
    12d2:	ff 27       	eor	r31, r31
    12d4:	93 58       	subi	r25, 0x83	; 131
    12d6:	5f 4f       	sbci	r21, 0xFF	; 255
    12d8:	3a f0       	brmi	.+14     	; 0x12e8 <__divsf3_pse+0x70>
    12da:	9e 3f       	cpi	r25, 0xFE	; 254
    12dc:	51 05       	cpc	r21, r1
    12de:	78 f0       	brcs	.+30     	; 0x12fe <__divsf3_pse+0x86>
    12e0:	0c 94 27 0a 	jmp	0x144e	; 0x144e <__fp_inf>
    12e4:	0c 94 72 0a 	jmp	0x14e4	; 0x14e4 <__fp_szero>
    12e8:	5f 3f       	cpi	r21, 0xFF	; 255
    12ea:	e4 f3       	brlt	.-8      	; 0x12e4 <__divsf3_pse+0x6c>
    12ec:	98 3e       	cpi	r25, 0xE8	; 232
    12ee:	d4 f3       	brlt	.-12     	; 0x12e4 <__divsf3_pse+0x6c>
    12f0:	86 95       	lsr	r24
    12f2:	77 95       	ror	r23
    12f4:	67 95       	ror	r22
    12f6:	b7 95       	ror	r27
    12f8:	f7 95       	ror	r31
    12fa:	9f 5f       	subi	r25, 0xFF	; 255
    12fc:	c9 f7       	brne	.-14     	; 0x12f0 <__divsf3_pse+0x78>
    12fe:	88 0f       	add	r24, r24
    1300:	91 1d       	adc	r25, r1
    1302:	96 95       	lsr	r25
    1304:	87 95       	ror	r24
    1306:	97 f9       	bld	r25, 7
    1308:	08 95       	ret
    130a:	e1 e0       	ldi	r30, 0x01	; 1
    130c:	66 0f       	add	r22, r22
    130e:	77 1f       	adc	r23, r23
    1310:	88 1f       	adc	r24, r24
    1312:	bb 1f       	adc	r27, r27
    1314:	62 17       	cp	r22, r18
    1316:	73 07       	cpc	r23, r19
    1318:	84 07       	cpc	r24, r20
    131a:	ba 07       	cpc	r27, r26
    131c:	20 f0       	brcs	.+8      	; 0x1326 <__divsf3_pse+0xae>
    131e:	62 1b       	sub	r22, r18
    1320:	73 0b       	sbc	r23, r19
    1322:	84 0b       	sbc	r24, r20
    1324:	ba 0b       	sbc	r27, r26
    1326:	ee 1f       	adc	r30, r30
    1328:	88 f7       	brcc	.-30     	; 0x130c <__divsf3_pse+0x94>
    132a:	e0 95       	com	r30
    132c:	08 95       	ret

0000132e <__fixunssfsi>:
    132e:	0e 94 57 0a 	call	0x14ae	; 0x14ae <__fp_splitA>
    1332:	88 f0       	brcs	.+34     	; 0x1356 <__fixunssfsi+0x28>
    1334:	9f 57       	subi	r25, 0x7F	; 127
    1336:	98 f0       	brcs	.+38     	; 0x135e <__fixunssfsi+0x30>
    1338:	b9 2f       	mov	r27, r25
    133a:	99 27       	eor	r25, r25
    133c:	b7 51       	subi	r27, 0x17	; 23
    133e:	b0 f0       	brcs	.+44     	; 0x136c <__fixunssfsi+0x3e>
    1340:	e1 f0       	breq	.+56     	; 0x137a <__fixunssfsi+0x4c>
    1342:	66 0f       	add	r22, r22
    1344:	77 1f       	adc	r23, r23
    1346:	88 1f       	adc	r24, r24
    1348:	99 1f       	adc	r25, r25
    134a:	1a f0       	brmi	.+6      	; 0x1352 <__fixunssfsi+0x24>
    134c:	ba 95       	dec	r27
    134e:	c9 f7       	brne	.-14     	; 0x1342 <__fixunssfsi+0x14>
    1350:	14 c0       	rjmp	.+40     	; 0x137a <__fixunssfsi+0x4c>
    1352:	b1 30       	cpi	r27, 0x01	; 1
    1354:	91 f0       	breq	.+36     	; 0x137a <__fixunssfsi+0x4c>
    1356:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <__fp_zero>
    135a:	b1 e0       	ldi	r27, 0x01	; 1
    135c:	08 95       	ret
    135e:	0c 94 71 0a 	jmp	0x14e2	; 0x14e2 <__fp_zero>
    1362:	67 2f       	mov	r22, r23
    1364:	78 2f       	mov	r23, r24
    1366:	88 27       	eor	r24, r24
    1368:	b8 5f       	subi	r27, 0xF8	; 248
    136a:	39 f0       	breq	.+14     	; 0x137a <__fixunssfsi+0x4c>
    136c:	b9 3f       	cpi	r27, 0xF9	; 249
    136e:	cc f3       	brlt	.-14     	; 0x1362 <__fixunssfsi+0x34>
    1370:	86 95       	lsr	r24
    1372:	77 95       	ror	r23
    1374:	67 95       	ror	r22
    1376:	b3 95       	inc	r27
    1378:	d9 f7       	brne	.-10     	; 0x1370 <__fixunssfsi+0x42>
    137a:	3e f4       	brtc	.+14     	; 0x138a <__fixunssfsi+0x5c>
    137c:	90 95       	com	r25
    137e:	80 95       	com	r24
    1380:	70 95       	com	r23
    1382:	61 95       	neg	r22
    1384:	7f 4f       	sbci	r23, 0xFF	; 255
    1386:	8f 4f       	sbci	r24, 0xFF	; 255
    1388:	9f 4f       	sbci	r25, 0xFF	; 255
    138a:	08 95       	ret

0000138c <__floatunsisf>:
    138c:	e8 94       	clt
    138e:	09 c0       	rjmp	.+18     	; 0x13a2 <__floatsisf+0x12>

00001390 <__floatsisf>:
    1390:	97 fb       	bst	r25, 7
    1392:	3e f4       	brtc	.+14     	; 0x13a2 <__floatsisf+0x12>
    1394:	90 95       	com	r25
    1396:	80 95       	com	r24
    1398:	70 95       	com	r23
    139a:	61 95       	neg	r22
    139c:	7f 4f       	sbci	r23, 0xFF	; 255
    139e:	8f 4f       	sbci	r24, 0xFF	; 255
    13a0:	9f 4f       	sbci	r25, 0xFF	; 255
    13a2:	99 23       	and	r25, r25
    13a4:	a9 f0       	breq	.+42     	; 0x13d0 <__floatsisf+0x40>
    13a6:	f9 2f       	mov	r31, r25
    13a8:	96 e9       	ldi	r25, 0x96	; 150
    13aa:	bb 27       	eor	r27, r27
    13ac:	93 95       	inc	r25
    13ae:	f6 95       	lsr	r31
    13b0:	87 95       	ror	r24
    13b2:	77 95       	ror	r23
    13b4:	67 95       	ror	r22
    13b6:	b7 95       	ror	r27
    13b8:	f1 11       	cpse	r31, r1
    13ba:	f8 cf       	rjmp	.-16     	; 0x13ac <__floatsisf+0x1c>
    13bc:	fa f4       	brpl	.+62     	; 0x13fc <__floatsisf+0x6c>
    13be:	bb 0f       	add	r27, r27
    13c0:	11 f4       	brne	.+4      	; 0x13c6 <__floatsisf+0x36>
    13c2:	60 ff       	sbrs	r22, 0
    13c4:	1b c0       	rjmp	.+54     	; 0x13fc <__floatsisf+0x6c>
    13c6:	6f 5f       	subi	r22, 0xFF	; 255
    13c8:	7f 4f       	sbci	r23, 0xFF	; 255
    13ca:	8f 4f       	sbci	r24, 0xFF	; 255
    13cc:	9f 4f       	sbci	r25, 0xFF	; 255
    13ce:	16 c0       	rjmp	.+44     	; 0x13fc <__floatsisf+0x6c>
    13d0:	88 23       	and	r24, r24
    13d2:	11 f0       	breq	.+4      	; 0x13d8 <__floatsisf+0x48>
    13d4:	96 e9       	ldi	r25, 0x96	; 150
    13d6:	11 c0       	rjmp	.+34     	; 0x13fa <__floatsisf+0x6a>
    13d8:	77 23       	and	r23, r23
    13da:	21 f0       	breq	.+8      	; 0x13e4 <__floatsisf+0x54>
    13dc:	9e e8       	ldi	r25, 0x8E	; 142
    13de:	87 2f       	mov	r24, r23
    13e0:	76 2f       	mov	r23, r22
    13e2:	05 c0       	rjmp	.+10     	; 0x13ee <__floatsisf+0x5e>
    13e4:	66 23       	and	r22, r22
    13e6:	71 f0       	breq	.+28     	; 0x1404 <__floatsisf+0x74>
    13e8:	96 e8       	ldi	r25, 0x86	; 134
    13ea:	86 2f       	mov	r24, r22
    13ec:	70 e0       	ldi	r23, 0x00	; 0
    13ee:	60 e0       	ldi	r22, 0x00	; 0
    13f0:	2a f0       	brmi	.+10     	; 0x13fc <__floatsisf+0x6c>
    13f2:	9a 95       	dec	r25
    13f4:	66 0f       	add	r22, r22
    13f6:	77 1f       	adc	r23, r23
    13f8:	88 1f       	adc	r24, r24
    13fa:	da f7       	brpl	.-10     	; 0x13f2 <__floatsisf+0x62>
    13fc:	88 0f       	add	r24, r24
    13fe:	96 95       	lsr	r25
    1400:	87 95       	ror	r24
    1402:	97 f9       	bld	r25, 7
    1404:	08 95       	ret

00001406 <__fp_cmp>:
    1406:	99 0f       	add	r25, r25
    1408:	00 08       	sbc	r0, r0
    140a:	55 0f       	add	r21, r21
    140c:	aa 0b       	sbc	r26, r26
    140e:	e0 e8       	ldi	r30, 0x80	; 128
    1410:	fe ef       	ldi	r31, 0xFE	; 254
    1412:	16 16       	cp	r1, r22
    1414:	17 06       	cpc	r1, r23
    1416:	e8 07       	cpc	r30, r24
    1418:	f9 07       	cpc	r31, r25
    141a:	c0 f0       	brcs	.+48     	; 0x144c <__fp_cmp+0x46>
    141c:	12 16       	cp	r1, r18
    141e:	13 06       	cpc	r1, r19
    1420:	e4 07       	cpc	r30, r20
    1422:	f5 07       	cpc	r31, r21
    1424:	98 f0       	brcs	.+38     	; 0x144c <__fp_cmp+0x46>
    1426:	62 1b       	sub	r22, r18
    1428:	73 0b       	sbc	r23, r19
    142a:	84 0b       	sbc	r24, r20
    142c:	95 0b       	sbc	r25, r21
    142e:	39 f4       	brne	.+14     	; 0x143e <__fp_cmp+0x38>
    1430:	0a 26       	eor	r0, r26
    1432:	61 f0       	breq	.+24     	; 0x144c <__fp_cmp+0x46>
    1434:	23 2b       	or	r18, r19
    1436:	24 2b       	or	r18, r20
    1438:	25 2b       	or	r18, r21
    143a:	21 f4       	brne	.+8      	; 0x1444 <__fp_cmp+0x3e>
    143c:	08 95       	ret
    143e:	0a 26       	eor	r0, r26
    1440:	09 f4       	brne	.+2      	; 0x1444 <__fp_cmp+0x3e>
    1442:	a1 40       	sbci	r26, 0x01	; 1
    1444:	a6 95       	lsr	r26
    1446:	8f ef       	ldi	r24, 0xFF	; 255
    1448:	81 1d       	adc	r24, r1
    144a:	81 1d       	adc	r24, r1
    144c:	08 95       	ret

0000144e <__fp_inf>:
    144e:	97 f9       	bld	r25, 7
    1450:	9f 67       	ori	r25, 0x7F	; 127
    1452:	80 e8       	ldi	r24, 0x80	; 128
    1454:	70 e0       	ldi	r23, 0x00	; 0
    1456:	60 e0       	ldi	r22, 0x00	; 0
    1458:	08 95       	ret

0000145a <__fp_nan>:
    145a:	9f ef       	ldi	r25, 0xFF	; 255
    145c:	80 ec       	ldi	r24, 0xC0	; 192
    145e:	08 95       	ret

00001460 <__fp_pscA>:
    1460:	00 24       	eor	r0, r0
    1462:	0a 94       	dec	r0
    1464:	16 16       	cp	r1, r22
    1466:	17 06       	cpc	r1, r23
    1468:	18 06       	cpc	r1, r24
    146a:	09 06       	cpc	r0, r25
    146c:	08 95       	ret

0000146e <__fp_pscB>:
    146e:	00 24       	eor	r0, r0
    1470:	0a 94       	dec	r0
    1472:	12 16       	cp	r1, r18
    1474:	13 06       	cpc	r1, r19
    1476:	14 06       	cpc	r1, r20
    1478:	05 06       	cpc	r0, r21
    147a:	08 95       	ret

0000147c <__fp_round>:
    147c:	09 2e       	mov	r0, r25
    147e:	03 94       	inc	r0
    1480:	00 0c       	add	r0, r0
    1482:	11 f4       	brne	.+4      	; 0x1488 <__fp_round+0xc>
    1484:	88 23       	and	r24, r24
    1486:	52 f0       	brmi	.+20     	; 0x149c <__fp_round+0x20>
    1488:	bb 0f       	add	r27, r27
    148a:	40 f4       	brcc	.+16     	; 0x149c <__fp_round+0x20>
    148c:	bf 2b       	or	r27, r31
    148e:	11 f4       	brne	.+4      	; 0x1494 <__fp_round+0x18>
    1490:	60 ff       	sbrs	r22, 0
    1492:	04 c0       	rjmp	.+8      	; 0x149c <__fp_round+0x20>
    1494:	6f 5f       	subi	r22, 0xFF	; 255
    1496:	7f 4f       	sbci	r23, 0xFF	; 255
    1498:	8f 4f       	sbci	r24, 0xFF	; 255
    149a:	9f 4f       	sbci	r25, 0xFF	; 255
    149c:	08 95       	ret

0000149e <__fp_split3>:
    149e:	57 fd       	sbrc	r21, 7
    14a0:	90 58       	subi	r25, 0x80	; 128
    14a2:	44 0f       	add	r20, r20
    14a4:	55 1f       	adc	r21, r21
    14a6:	59 f0       	breq	.+22     	; 0x14be <__fp_splitA+0x10>
    14a8:	5f 3f       	cpi	r21, 0xFF	; 255
    14aa:	71 f0       	breq	.+28     	; 0x14c8 <__fp_splitA+0x1a>
    14ac:	47 95       	ror	r20

000014ae <__fp_splitA>:
    14ae:	88 0f       	add	r24, r24
    14b0:	97 fb       	bst	r25, 7
    14b2:	99 1f       	adc	r25, r25
    14b4:	61 f0       	breq	.+24     	; 0x14ce <__fp_splitA+0x20>
    14b6:	9f 3f       	cpi	r25, 0xFF	; 255
    14b8:	79 f0       	breq	.+30     	; 0x14d8 <__fp_splitA+0x2a>
    14ba:	87 95       	ror	r24
    14bc:	08 95       	ret
    14be:	12 16       	cp	r1, r18
    14c0:	13 06       	cpc	r1, r19
    14c2:	14 06       	cpc	r1, r20
    14c4:	55 1f       	adc	r21, r21
    14c6:	f2 cf       	rjmp	.-28     	; 0x14ac <__fp_split3+0xe>
    14c8:	46 95       	lsr	r20
    14ca:	f1 df       	rcall	.-30     	; 0x14ae <__fp_splitA>
    14cc:	08 c0       	rjmp	.+16     	; 0x14de <__fp_splitA+0x30>
    14ce:	16 16       	cp	r1, r22
    14d0:	17 06       	cpc	r1, r23
    14d2:	18 06       	cpc	r1, r24
    14d4:	99 1f       	adc	r25, r25
    14d6:	f1 cf       	rjmp	.-30     	; 0x14ba <__fp_splitA+0xc>
    14d8:	86 95       	lsr	r24
    14da:	71 05       	cpc	r23, r1
    14dc:	61 05       	cpc	r22, r1
    14de:	08 94       	sec
    14e0:	08 95       	ret

000014e2 <__fp_zero>:
    14e2:	e8 94       	clt

000014e4 <__fp_szero>:
    14e4:	bb 27       	eor	r27, r27
    14e6:	66 27       	eor	r22, r22
    14e8:	77 27       	eor	r23, r23
    14ea:	cb 01       	movw	r24, r22
    14ec:	97 f9       	bld	r25, 7
    14ee:	08 95       	ret

000014f0 <__gesf2>:
    14f0:	0e 94 03 0a 	call	0x1406	; 0x1406 <__fp_cmp>
    14f4:	08 f4       	brcc	.+2      	; 0x14f8 <__gesf2+0x8>
    14f6:	8f ef       	ldi	r24, 0xFF	; 255
    14f8:	08 95       	ret

000014fa <__mulsf3>:
    14fa:	0e 94 90 0a 	call	0x1520	; 0x1520 <__mulsf3x>
    14fe:	0c 94 3e 0a 	jmp	0x147c	; 0x147c <__fp_round>
    1502:	0e 94 30 0a 	call	0x1460	; 0x1460 <__fp_pscA>
    1506:	38 f0       	brcs	.+14     	; 0x1516 <__mulsf3+0x1c>
    1508:	0e 94 37 0a 	call	0x146e	; 0x146e <__fp_pscB>
    150c:	20 f0       	brcs	.+8      	; 0x1516 <__mulsf3+0x1c>
    150e:	95 23       	and	r25, r21
    1510:	11 f0       	breq	.+4      	; 0x1516 <__mulsf3+0x1c>
    1512:	0c 94 27 0a 	jmp	0x144e	; 0x144e <__fp_inf>
    1516:	0c 94 2d 0a 	jmp	0x145a	; 0x145a <__fp_nan>
    151a:	11 24       	eor	r1, r1
    151c:	0c 94 72 0a 	jmp	0x14e4	; 0x14e4 <__fp_szero>

00001520 <__mulsf3x>:
    1520:	0e 94 4f 0a 	call	0x149e	; 0x149e <__fp_split3>
    1524:	70 f3       	brcs	.-36     	; 0x1502 <__mulsf3+0x8>

00001526 <__mulsf3_pse>:
    1526:	95 9f       	mul	r25, r21
    1528:	c1 f3       	breq	.-16     	; 0x151a <__mulsf3+0x20>
    152a:	95 0f       	add	r25, r21
    152c:	50 e0       	ldi	r21, 0x00	; 0
    152e:	55 1f       	adc	r21, r21
    1530:	62 9f       	mul	r22, r18
    1532:	f0 01       	movw	r30, r0
    1534:	72 9f       	mul	r23, r18
    1536:	bb 27       	eor	r27, r27
    1538:	f0 0d       	add	r31, r0
    153a:	b1 1d       	adc	r27, r1
    153c:	63 9f       	mul	r22, r19
    153e:	aa 27       	eor	r26, r26
    1540:	f0 0d       	add	r31, r0
    1542:	b1 1d       	adc	r27, r1
    1544:	aa 1f       	adc	r26, r26
    1546:	64 9f       	mul	r22, r20
    1548:	66 27       	eor	r22, r22
    154a:	b0 0d       	add	r27, r0
    154c:	a1 1d       	adc	r26, r1
    154e:	66 1f       	adc	r22, r22
    1550:	82 9f       	mul	r24, r18
    1552:	22 27       	eor	r18, r18
    1554:	b0 0d       	add	r27, r0
    1556:	a1 1d       	adc	r26, r1
    1558:	62 1f       	adc	r22, r18
    155a:	73 9f       	mul	r23, r19
    155c:	b0 0d       	add	r27, r0
    155e:	a1 1d       	adc	r26, r1
    1560:	62 1f       	adc	r22, r18
    1562:	83 9f       	mul	r24, r19
    1564:	a0 0d       	add	r26, r0
    1566:	61 1d       	adc	r22, r1
    1568:	22 1f       	adc	r18, r18
    156a:	74 9f       	mul	r23, r20
    156c:	33 27       	eor	r19, r19
    156e:	a0 0d       	add	r26, r0
    1570:	61 1d       	adc	r22, r1
    1572:	23 1f       	adc	r18, r19
    1574:	84 9f       	mul	r24, r20
    1576:	60 0d       	add	r22, r0
    1578:	21 1d       	adc	r18, r1
    157a:	82 2f       	mov	r24, r18
    157c:	76 2f       	mov	r23, r22
    157e:	6a 2f       	mov	r22, r26
    1580:	11 24       	eor	r1, r1
    1582:	9f 57       	subi	r25, 0x7F	; 127
    1584:	50 40       	sbci	r21, 0x00	; 0
    1586:	9a f0       	brmi	.+38     	; 0x15ae <__mulsf3_pse+0x88>
    1588:	f1 f0       	breq	.+60     	; 0x15c6 <__mulsf3_pse+0xa0>
    158a:	88 23       	and	r24, r24
    158c:	4a f0       	brmi	.+18     	; 0x15a0 <__mulsf3_pse+0x7a>
    158e:	ee 0f       	add	r30, r30
    1590:	ff 1f       	adc	r31, r31
    1592:	bb 1f       	adc	r27, r27
    1594:	66 1f       	adc	r22, r22
    1596:	77 1f       	adc	r23, r23
    1598:	88 1f       	adc	r24, r24
    159a:	91 50       	subi	r25, 0x01	; 1
    159c:	50 40       	sbci	r21, 0x00	; 0
    159e:	a9 f7       	brne	.-22     	; 0x158a <__mulsf3_pse+0x64>
    15a0:	9e 3f       	cpi	r25, 0xFE	; 254
    15a2:	51 05       	cpc	r21, r1
    15a4:	80 f0       	brcs	.+32     	; 0x15c6 <__mulsf3_pse+0xa0>
    15a6:	0c 94 27 0a 	jmp	0x144e	; 0x144e <__fp_inf>
    15aa:	0c 94 72 0a 	jmp	0x14e4	; 0x14e4 <__fp_szero>
    15ae:	5f 3f       	cpi	r21, 0xFF	; 255
    15b0:	e4 f3       	brlt	.-8      	; 0x15aa <__mulsf3_pse+0x84>
    15b2:	98 3e       	cpi	r25, 0xE8	; 232
    15b4:	d4 f3       	brlt	.-12     	; 0x15aa <__mulsf3_pse+0x84>
    15b6:	86 95       	lsr	r24
    15b8:	77 95       	ror	r23
    15ba:	67 95       	ror	r22
    15bc:	b7 95       	ror	r27
    15be:	f7 95       	ror	r31
    15c0:	e7 95       	ror	r30
    15c2:	9f 5f       	subi	r25, 0xFF	; 255
    15c4:	c1 f7       	brne	.-16     	; 0x15b6 <__mulsf3_pse+0x90>
    15c6:	fe 2b       	or	r31, r30
    15c8:	88 0f       	add	r24, r24
    15ca:	91 1d       	adc	r25, r1
    15cc:	96 95       	lsr	r25
    15ce:	87 95       	ror	r24
    15d0:	97 f9       	bld	r25, 7
    15d2:	08 95       	ret

000015d4 <__tablejump2__>:
    15d4:	ee 0f       	add	r30, r30
    15d6:	ff 1f       	adc	r31, r31
    15d8:	05 90       	lpm	r0, Z+
    15da:	f4 91       	lpm	r31, Z
    15dc:	e0 2d       	mov	r30, r0
    15de:	09 94       	ijmp

000015e0 <_exit>:
    15e0:	f8 94       	cli

000015e2 <__stop_program>:
    15e2:	ff cf       	rjmp	.-2      	; 0x15e2 <__stop_program>
